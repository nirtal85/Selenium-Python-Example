{"uid":"7b51383ad24638af","name":"Logout of system test","fullName":"tests.login_test.TestLogin#test_logout","historyId":"eb3d76a7dd02d1797e8f6a64d3c87a40","time":{"start":1741138971508,"stop":1741138982033,"duration":10525},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x564c808e253a <unknown>\n#1 0x564c803ddf00 <unknown>\n#2 0x564c8042dc0c <unknown>\n#3 0x564c8042de31 <unknown>\n#4 0x564c80473bd4 <unknown>\n#5 0x564c804525cd <unknown>\n#6 0x564c80470f84 <unknown>\n#7 0x564c80452343 <unknown>\n#8 0x564c8041f78a <unknown>\n#9 0x564c804209de <unknown>\n#10 0x564c808ac2cb <unknown>\n#11 0x564c808b0242 <unknown>\n#12 0x564c808997ac <unknown>\n#13 0x564c808b0df7 <unknown>\n#14 0x564c8087db2f <unknown>\n#15 0x564c808d11a8 <unknown>\n#16 0x564c808d1370 <unknown>\n#17 0x564c808e13b6 <unknown>\n#18 0x7f4722c9caa4 <unknown>\n#19 0x7f4722d29c3c <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f2e41db9ee0>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ad50e85dbaab0207dff6a4c19096aa58\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f2e41a8f9c0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x564c808e253a <unknown>\nE       #1 0x564c803ddf00 <unknown>\nE       #2 0x564c8042dc0c <unknown>\nE       #3 0x564c8042de31 <unknown>\nE       #4 0x564c80473bd4 <unknown>\nE       #5 0x564c804525cd <unknown>\nE       #6 0x564c80470f84 <unknown>\nE       #7 0x564c80452343 <unknown>\nE       #8 0x564c8041f78a <unknown>\nE       #9 0x564c804209de <unknown>\nE       #10 0x564c808ac2cb <unknown>\nE       #11 0x564c808b0242 <unknown>\nE       #12 0x564c808997ac <unknown>\nE       #13 0x564c808b0df7 <unknown>\nE       #14 0x564c8087db2f <unknown>\nE       #15 0x564c808d11a8 <unknown>\nE       #16 0x564c808d1370 <unknown>\nE       #17 0x564c808e13b6 <unknown>\nE       #18 0x7f4722c9caa4 <unknown>\nE       #19 0x7f4722d29c3c <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1741138905186,"stop":1741138905186,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1741138905186,"stop":1741138905186,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"data","time":{"start":1741138905186,"stop":1741138905187,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"session_request","time":{"start":1741138905186,"stop":1741138905186,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x564c808e253a <unknown>\n#1 0x564c803ddf00 <unknown>\n#2 0x564c8042dc0c <unknown>\n#3 0x564c8042de31 <unknown>\n#4 0x564c80473bd4 <unknown>\n#5 0x564c804525cd <unknown>\n#6 0x564c80470f84 <unknown>\n#7 0x564c80452343 <unknown>\n#8 0x564c8041f78a <unknown>\n#9 0x564c804209de <unknown>\n#10 0x564c808ac2cb <unknown>\n#11 0x564c808b0242 <unknown>\n#12 0x564c808997ac <unknown>\n#13 0x564c808b0df7 <unknown>\n#14 0x564c8087db2f <unknown>\n#15 0x564c808d11a8 <unknown>\n#16 0x564c808d1370 <unknown>\n#17 0x564c808e13b6 <unknown>\n#18 0x7f4722c9caa4 <unknown>\n#19 0x7f4722d29c3c <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f2e41db9ee0>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ad50e85dbaab0207dff6a4c19096aa58\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f2e41a8f9c0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x564c808e253a <unknown>\nE       #1 0x564c803ddf00 <unknown>\nE       #2 0x564c8042dc0c <unknown>\nE       #3 0x564c8042de31 <unknown>\nE       #4 0x564c80473bd4 <unknown>\nE       #5 0x564c804525cd <unknown>\nE       #6 0x564c80470f84 <unknown>\nE       #7 0x564c80452343 <unknown>\nE       #8 0x564c8041f78a <unknown>\nE       #9 0x564c804209de <unknown>\nE       #10 0x564c808ac2cb <unknown>\nE       #11 0x564c808b0242 <unknown>\nE       #12 0x564c808997ac <unknown>\nE       #13 0x564c808b0df7 <unknown>\nE       #14 0x564c8087db2f <unknown>\nE       #15 0x564c808d11a8 <unknown>\nE       #16 0x564c808d1370 <unknown>\nE       #17 0x564c808e13b6 <unknown>\nE       #18 0x7f4722c9caa4 <unknown>\nE       #19 0x7f4722d29c3c <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1741138971509,"stop":1741138982032,"duration":10523},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x564c808e253a <unknown>\n#1 0x564c803ddf00 <unknown>\n#2 0x564c8042dc0c <unknown>\n#3 0x564c8042de31 <unknown>\n#4 0x564c80473bd4 <unknown>\n#5 0x564c804525cd <unknown>\n#6 0x564c80470f84 <unknown>\n#7 0x564c80452343 <unknown>\n#8 0x564c8041f78a <unknown>\n#9 0x564c804209de <unknown>\n#10 0x564c808ac2cb <unknown>\n#11 0x564c808b0242 <unknown>\n#12 0x564c808997ac <unknown>\n#13 0x564c808b0df7 <unknown>\n#14 0x564c8087db2f <unknown>\n#15 0x564c808d11a8 <unknown>\n#16 0x564c808d1370 <unknown>\n#17 0x564c808e13b6 <unknown>\n#18 0x7f4722c9caa4 <unknown>\n#19 0x7f4722d29c3c <unknown>\n\n","statusTrace":"  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 20, in click_login_link\n    self.click(self.LOGIN_LINK)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 60, in click\n    el: WebElement = self.wait.until(\n                     ^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py\", line 146, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"public ip address","time":{"start":1741138982053,"stop":1741138982108,"duration":55},"status":"passed","steps":[],"attachments":[{"uid":"129b13703c071a73","name":"HTTP logs of http://checkip.amazonaws.com/","source":"129b13703c071a73.txt","type":"text/plain","size":357}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"d483a47947f02013","name":"HTML Attachment Example","source":"d483a47947f02013.html","type":"text/html","size":32},{"uid":"59f6b6fef7a312fa","name":"File Attachment Example","source":"59f6b6fef7a312fa.png","type":"image/png","size":14730},{"uid":"320d5cd6c9f4a182","name":"Text Attachment Example","source":"320d5cd6c9f4a182.txt","type":"text/plain","size":17},{"uid":"90115a136804bc69","name":"CSV Attachment Example","source":"90115a136804bc69.csv","type":"text/csv","size":32},{"uid":"a39a5a49b843323d","name":"JSON Attachment Example","source":"a39a5a49b843323d.json","type":"application/json","size":31},{"uid":"e00e449514e6d275","name":"XML Attachment Example","source":"e00e449514e6d275.xml","type":"application/xml","size":140},{"uid":"fc3d39db0ad0227b","name":"URI List Attachment Example","source":"fc3d39db0ad0227b.uri","type":"text/uri-list","size":70},{"uid":"74b5ccf885b6811c","name":"Cookies","source":"74b5ccf885b6811c.json","type":"application/json","size":4110},{"uid":"9731635182afc5b5","name":"Session Storage","source":"9731635182afc5b5.json","type":"application/json","size":358},{"uid":"70b0e2253f1222ac","name":"Local Storage","source":"70b0e2253f1222ac.json","type":"application/json","size":791},{"uid":"a251d85c98081261","name":"Full Page Screenshot","source":"a251d85c98081261.png","type":"image/png","size":4169389},{"uid":"6898a11cb032d753","name":"URL","source":"6898a11cb032d753.uri","type":"text/uri-list","size":23},{"uid":"51df0c23c9146cd1","name":"Network Logs","source":"51df0c23c9146cd1.json","type":"application/json","size":6839515}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":14,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"session_request::0","time":{"start":1741138986480,"stop":1741138986480,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"blocker"},{"name":"story","value":"As a user I want to be able to logout after a successful login."},{"name":"feature","value":"Login"},{"name":"epic","value":"Security"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"login_test"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az816-183"},{"name":"thread","value":"2020-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.login_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"******"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security"]},"source":"7b51383ad24638af.json","parameterValues":["******"]}