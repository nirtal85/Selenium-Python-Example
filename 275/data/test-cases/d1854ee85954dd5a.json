{"uid":"d1854ee85954dd5a","name":"Logout of system test","fullName":"tests.login_test.TestLogin#test_logout","historyId":"9fae2004e5f3520c043b9b10b45af0fc","time":{"start":1714872029833,"stop":1714872040165,"duration":10332},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55ba54db1e33 <unknown>\n#1 0x55ba54aa1567 <unknown>\n#2 0x55ba54aec27d <unknown>\n#3 0x55ba54aec331 <unknown>\n#4 0x55ba54b2f624 <unknown>\n#5 0x55ba54b0e38d <unknown>\n#6 0x55ba54b2cae2 <unknown>\n#7 0x55ba54b0e103 <unknown>\n#8 0x55ba54adf1ba <unknown>\n#9 0x55ba54adfb8e <unknown>\n#10 0x55ba54d7659b <unknown>\n#11 0x55ba54d7a34b <unknown>\n#12 0x55ba54d62681 <unknown>\n#13 0x55ba54d7aeb2 <unknown>\n#14 0x55ba54d476af <unknown>\n#15 0x55ba54da1428 <unknown>\n#16 0x55ba54da1600 <unknown>\n#17 0x55ba54db0f84 <unknown>\n#18 0x7f401c094ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7fc673911be0>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e36c7f2f44fd7bdd1e4626ba73029ab3\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7fc672f825c0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55ba54db1e33 <unknown>\nE       #1 0x55ba54aa1567 <unknown>\nE       #2 0x55ba54aec27d <unknown>\nE       #3 0x55ba54aec331 <unknown>\nE       #4 0x55ba54b2f624 <unknown>\nE       #5 0x55ba54b0e38d <unknown>\nE       #6 0x55ba54b2cae2 <unknown>\nE       #7 0x55ba54b0e103 <unknown>\nE       #8 0x55ba54adf1ba <unknown>\nE       #9 0x55ba54adfb8e <unknown>\nE       #10 0x55ba54d7659b <unknown>\nE       #11 0x55ba54d7a34b <unknown>\nE       #12 0x55ba54d62681 <unknown>\nE       #13 0x55ba54d7aeb2 <unknown>\nE       #14 0x55ba54d476af <unknown>\nE       #15 0x55ba54da1428 <unknown>\nE       #16 0x55ba54da1600 <unknown>\nE       #17 0x55ba54db0f84 <unknown>\nE       #18 0x7f401c094ac3 <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55ba54db1e33 <unknown>\n#1 0x55ba54aa1567 <unknown>\n#2 0x55ba54aec27d <unknown>\n#3 0x55ba54aec331 <unknown>\n#4 0x55ba54b2f624 <unknown>\n#5 0x55ba54b0e38d <unknown>\n#6 0x55ba54b2cae2 <unknown>\n#7 0x55ba54b0e103 <unknown>\n#8 0x55ba54adf1ba <unknown>\n#9 0x55ba54adfb8e <unknown>\n#10 0x55ba54d7659b <unknown>\n#11 0x55ba54d7a34b <unknown>\n#12 0x55ba54d62681 <unknown>\n#13 0x55ba54d7aeb2 <unknown>\n#14 0x55ba54d476af <unknown>\n#15 0x55ba54da1428 <unknown>\n#16 0x55ba54da1600 <unknown>\n#17 0x55ba54db0f84 <unknown>\n#18 0x7f401c094ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7fc673911be0>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e36c7f2f44fd7bdd1e4626ba73029ab3\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7fc672f825c0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55ba54db1e33 <unknown>\nE       #1 0x55ba54aa1567 <unknown>\nE       #2 0x55ba54aec27d <unknown>\nE       #3 0x55ba54aec331 <unknown>\nE       #4 0x55ba54b2f624 <unknown>\nE       #5 0x55ba54b0e38d <unknown>\nE       #6 0x55ba54b2cae2 <unknown>\nE       #7 0x55ba54b0e103 <unknown>\nE       #8 0x55ba54adf1ba <unknown>\nE       #9 0x55ba54adfb8e <unknown>\nE       #10 0x55ba54d7659b <unknown>\nE       #11 0x55ba54d7a34b <unknown>\nE       #12 0x55ba54d62681 <unknown>\nE       #13 0x55ba54d7aeb2 <unknown>\nE       #14 0x55ba54d476af <unknown>\nE       #15 0x55ba54da1428 <unknown>\nE       #16 0x55ba54da1600 <unknown>\nE       #17 0x55ba54db0f84 <unknown>\nE       #18 0x7f401c094ac3 <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1714872029834,"stop":1714872040165,"duration":10331},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55ba54db1e33 <unknown>\n#1 0x55ba54aa1567 <unknown>\n#2 0x55ba54aec27d <unknown>\n#3 0x55ba54aec331 <unknown>\n#4 0x55ba54b2f624 <unknown>\n#5 0x55ba54b0e38d <unknown>\n#6 0x55ba54b2cae2 <unknown>\n#7 0x55ba54b0e103 <unknown>\n#8 0x55ba54adf1ba <unknown>\n#9 0x55ba54adfb8e <unknown>\n#10 0x55ba54d7659b <unknown>\n#11 0x55ba54d7a34b <unknown>\n#12 0x55ba54d62681 <unknown>\n#13 0x55ba54d7aeb2 <unknown>\n#14 0x55ba54d476af <unknown>\n#15 0x55ba54da1428 <unknown>\n#16 0x55ba54da1600 <unknown>\n#17 0x55ba54db0f84 <unknown>\n#18 0x7f401c094ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 20, in click_login_link\n    self.click(self.LOGIN_LINK)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 60, in click\n    el: WebElement = self.wait.until(\n                     ^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"public ip address","time":{"start":1714872040176,"stop":1714872040211,"duration":35},"status":"passed","steps":[],"attachments":[{"uid":"ac6d592fdc9c98a4","name":"HTTP logs of http://checkip.amazonaws.com/","source":"ac6d592fdc9c98a4.txt","type":"text/plain","size":356}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"eed6e8c632cbac26","name":"HTML Attachment Example","source":"eed6e8c632cbac26.html","type":"text/html","size":32},{"uid":"dc24a38b405f5edb","name":"File Attachment Example","source":"dc24a38b405f5edb.png","type":"image/png","size":14730},{"uid":"69df02b73995f42","name":"Text Attachment Example","source":"69df02b73995f42.txt","type":"text/plain","size":17},{"uid":"24f0496af98db515","name":"CSV Attachment Example","source":"24f0496af98db515.csv","type":"text/csv","size":32},{"uid":"acaea5c1ddd8b8eb","name":"JSON Attachment Example","source":"acaea5c1ddd8b8eb.json","type":"application/json","size":31},{"uid":"7612dbae33d02048","name":"XML Attachment Example","source":"7612dbae33d02048.xml","type":"application/xml","size":140},{"uid":"bb16317016ba04c3","name":"URI List Attachment Example","source":"bb16317016ba04c3.uri","type":"text/uri-list","size":70},{"uid":"372c22b6d04c2465","name":"Cookies","source":"372c22b6d04c2465.json","type":"application/json","size":3633},{"uid":"440218fefabf242e","name":"Session Storage","source":"440218fefabf242e.json","type":"application/json","size":358},{"uid":"83ab27a5f516e05c","name":"Local Storage","source":"83ab27a5f516e05c.json","type":"application/json","size":294},{"uid":"b45b63560b180811","name":"Console Logs","source":"b45b63560b180811.json","type":"application/json","size":7723},{"uid":"783f32987803f9d0","name":"Full Page Screenshot","source":"783f32987803f9d0.png","type":"image/png","size":6246649},{"uid":"4178c4cca38469e8","name":"URL","source":"4178c4cca38469e8.uri","type":"text/uri-list","size":23},{"uid":"8e022b0403829a11","name":"Network Logs","source":"8e022b0403829a11.json","type":"application/json","size":843196}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":15,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"As a user I want to be able to logout after a successful login."},{"name":"epic","value":"Security"},{"name":"feature","value":"Login"},{"name":"severity","value":"blocker"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"login_test"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az736-70"},{"name":"thread","value":"2383-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.login_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"******"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security"]},"source":"d1854ee85954dd5a.json","parameterValues":["******"]}