{"uid":"41898567054c8653","name":"Logout of system test","fullName":"tests.login_test.TestLogin#test_logout","historyId":"fafe63a4ab83afd79cb0f4d4c2042d75","time":{"start":1745372933713,"stop":1745372944187,"duration":10474},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55d0f376853a <unknown>\n#1 0x55d0f3263f00 <unknown>\n#2 0x55d0f32b3c0c <unknown>\n#3 0x55d0f32b3e31 <unknown>\n#4 0x55d0f32f9bd4 <unknown>\n#5 0x55d0f32d85cd <unknown>\n#6 0x55d0f32f6f84 <unknown>\n#7 0x55d0f32d8343 <unknown>\n#8 0x55d0f32a578a <unknown>\n#9 0x55d0f32a69de <unknown>\n#10 0x55d0f37322cb <unknown>\n#11 0x55d0f3736242 <unknown>\n#12 0x55d0f371f7ac <unknown>\n#13 0x55d0f3736df7 <unknown>\n#14 0x55d0f3703b2f <unknown>\n#15 0x55d0f37571a8 <unknown>\n#16 0x55d0f3757370 <unknown>\n#17 0x55d0f37673b6 <unknown>\n#18 0x7f78df09caa4 <unknown>\n#19 0x7f78df129c3c <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f479c90deb0>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\"password\", \"qwerty\", mode=allure.parameter_mode.MASKED)\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:18: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:59: in click\n    el: WebElement = self.wait.until(expected_conditions.element_to_be_clickable(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c0c2cfce157174fefd254c2fd57c6e26\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f479cb13060>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55d0f376853a <unknown>\nE       #1 0x55d0f3263f00 <unknown>\nE       #2 0x55d0f32b3c0c <unknown>\nE       #3 0x55d0f32b3e31 <unknown>\nE       #4 0x55d0f32f9bd4 <unknown>\nE       #5 0x55d0f32d85cd <unknown>\nE       #6 0x55d0f32f6f84 <unknown>\nE       #7 0x55d0f32d8343 <unknown>\nE       #8 0x55d0f32a578a <unknown>\nE       #9 0x55d0f32a69de <unknown>\nE       #10 0x55d0f37322cb <unknown>\nE       #11 0x55d0f3736242 <unknown>\nE       #12 0x55d0f371f7ac <unknown>\nE       #13 0x55d0f3736df7 <unknown>\nE       #14 0x55d0f3703b2f <unknown>\nE       #15 0x55d0f37571a8 <unknown>\nE       #16 0x55d0f3757370 <unknown>\nE       #17 0x55d0f37673b6 <unknown>\nE       #18 0x7f78df09caa4 <unknown>\nE       #19 0x7f78df129c3c <unknown>\n\n.venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1745372875705,"stop":1745372875705,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745372875705,"stop":1745372875705,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"data","time":{"start":1745372875706,"stop":1745372875709,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"session_request","time":{"start":1745372875706,"stop":1745372875706,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55d0f376853a <unknown>\n#1 0x55d0f3263f00 <unknown>\n#2 0x55d0f32b3c0c <unknown>\n#3 0x55d0f32b3e31 <unknown>\n#4 0x55d0f32f9bd4 <unknown>\n#5 0x55d0f32d85cd <unknown>\n#6 0x55d0f32f6f84 <unknown>\n#7 0x55d0f32d8343 <unknown>\n#8 0x55d0f32a578a <unknown>\n#9 0x55d0f32a69de <unknown>\n#10 0x55d0f37322cb <unknown>\n#11 0x55d0f3736242 <unknown>\n#12 0x55d0f371f7ac <unknown>\n#13 0x55d0f3736df7 <unknown>\n#14 0x55d0f3703b2f <unknown>\n#15 0x55d0f37571a8 <unknown>\n#16 0x55d0f3757370 <unknown>\n#17 0x55d0f37673b6 <unknown>\n#18 0x7f78df09caa4 <unknown>\n#19 0x7f78df129c3c <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f479c90deb0>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\"password\", \"qwerty\", mode=allure.parameter_mode.MASKED)\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:18: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:59: in click\n    el: WebElement = self.wait.until(expected_conditions.element_to_be_clickable(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c0c2cfce157174fefd254c2fd57c6e26\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f479cb13060>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55d0f376853a <unknown>\nE       #1 0x55d0f3263f00 <unknown>\nE       #2 0x55d0f32b3c0c <unknown>\nE       #3 0x55d0f32b3e31 <unknown>\nE       #4 0x55d0f32f9bd4 <unknown>\nE       #5 0x55d0f32d85cd <unknown>\nE       #6 0x55d0f32f6f84 <unknown>\nE       #7 0x55d0f32d8343 <unknown>\nE       #8 0x55d0f32a578a <unknown>\nE       #9 0x55d0f32a69de <unknown>\nE       #10 0x55d0f37322cb <unknown>\nE       #11 0x55d0f3736242 <unknown>\nE       #12 0x55d0f371f7ac <unknown>\nE       #13 0x55d0f3736df7 <unknown>\nE       #14 0x55d0f3703b2f <unknown>\nE       #15 0x55d0f37571a8 <unknown>\nE       #16 0x55d0f3757370 <unknown>\nE       #17 0x55d0f37673b6 <unknown>\nE       #18 0x7f78df09caa4 <unknown>\nE       #19 0x7f78df129c3c <unknown>\n\n.venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1745372933714,"stop":1745372944186,"duration":10472},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55d0f376853a <unknown>\n#1 0x55d0f3263f00 <unknown>\n#2 0x55d0f32b3c0c <unknown>\n#3 0x55d0f32b3e31 <unknown>\n#4 0x55d0f32f9bd4 <unknown>\n#5 0x55d0f32d85cd <unknown>\n#6 0x55d0f32f6f84 <unknown>\n#7 0x55d0f32d8343 <unknown>\n#8 0x55d0f32a578a <unknown>\n#9 0x55d0f32a69de <unknown>\n#10 0x55d0f37322cb <unknown>\n#11 0x55d0f3736242 <unknown>\n#12 0x55d0f371f7ac <unknown>\n#13 0x55d0f3736df7 <unknown>\n#14 0x55d0f3703b2f <unknown>\n#15 0x55d0f37571a8 <unknown>\n#16 0x55d0f3757370 <unknown>\n#17 0x55d0f37673b6 <unknown>\n#18 0x7f78df09caa4 <unknown>\n#19 0x7f78df129c3c <unknown>\n\n","statusTrace":"  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 18, in click_login_link\n    self.click(self.LOGIN_LINK)\n    ~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 59, in click\n    el: WebElement = self.wait.until(expected_conditions.element_to_be_clickable(locator))\n                     ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py\", line 146, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"public ip address","time":{"start":1745372944195,"stop":1745372944340,"duration":145},"status":"passed","steps":[],"attachments":[{"uid":"4c408bed89cbcd7e","name":"HTTP logs of http://checkip.amazonaws.com/","source":"4c408bed89cbcd7e.txt","type":"text/plain","size":357}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"a70dfbebff12b8ba","name":"HTML Attachment Example","source":"a70dfbebff12b8ba.html","type":"text/html","size":32},{"uid":"5e0758b4dae8f596","name":"File Attachment Example","source":"5e0758b4dae8f596.png","type":"image/png","size":14730},{"uid":"683629d0ad49a75c","name":"Text Attachment Example","source":"683629d0ad49a75c.txt","type":"text/plain","size":17},{"uid":"6e6c674dd1df44d","name":"CSV Attachment Example","source":"6e6c674dd1df44d.csv","type":"text/csv","size":32},{"uid":"79fc7b40e8288b3a","name":"JSON Attachment Example","source":"79fc7b40e8288b3a.json","type":"application/json","size":31},{"uid":"a0d66a325133c6b","name":"XML Attachment Example","source":"a0d66a325133c6b.xml","type":"application/xml","size":140},{"uid":"2af865e17ffa5a47","name":"URI List Attachment Example","source":"2af865e17ffa5a47.uri","type":"text/uri-list","size":70},{"uid":"493a4d84db374c6","name":"Cookies","source":"493a4d84db374c6.json","type":"application/json","size":4108},{"uid":"c2cca1f6bcdc0992","name":"Session Storage","source":"c2cca1f6bcdc0992.json","type":"application/json","size":359},{"uid":"2e4595e22879a95e","name":"Local Storage","source":"2e4595e22879a95e.json","type":"application/json","size":500},{"uid":"676f3a114fdb446c","name":"Full Page Screenshot","source":"676f3a114fdb446c.png","type":"image/png","size":1358731},{"uid":"7b5713860372a043","name":"URL","source":"7b5713860372a043.uri","type":"text/uri-list","size":23},{"uid":"fecef30845ed67f0","name":"Network Logs","source":"fecef30845ed67f0.json","type":"application/json","size":59406}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":14,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"session_request::0","time":{"start":1745372946829,"stop":1745372946829,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Security"},{"name":"severity","value":"blocker"},{"name":"story","value":"As a user I want to be able to logout after a successful login."},{"name":"feature","value":"Login"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"login_test"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az1774-728"},{"name":"thread","value":"1981-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.login_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"******"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security"]},"source":"41898567054c8653.json","parameterValues":["******"]}