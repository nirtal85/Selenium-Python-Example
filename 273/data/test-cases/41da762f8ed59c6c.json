{"uid":"41da762f8ed59c6c","name":"Login with valid credentials test","fullName":"tests.test_login.TestLogin#test_valid_login","historyId":"38ab8f45abf666d426f8eaf42b1feac7","time":{"start":1666341036241,"stop":1666341037347,"duration":1106},"description":"valid login","descriptionHtml":"<p>valid login</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=106.0.5249.119)\nStacktrace:\n#0 0x5608e7f222c3 <unknown>\n#1 0x5608e7d2b700 <unknown>\n#2 0x5608e7d5ed1e <unknown>\n#3 0x5608e7d5e2c4 <unknown>\n#4 0x5608e7d82f42 <unknown>\n#5 0x5608e7d59073 <unknown>\n#6 0x5608e7d830ae <unknown>\n#7 0x5608e7d9aa50 <unknown>\n#8 0x5608e7d82d63 <unknown>\n#9 0x5608e7d577e3 <unknown>\n#10 0x5608e7d58a21 <unknown>\n#11 0x5608e7f7018e <unknown>\n#12 0x5608e7f73622 <unknown>\n#13 0x5608e7f56aae <unknown>\n#14 0x5608e7f742a3 <unknown>\n#15 0x5608e7f4aecf <unknown>\n#16 0x5608e7f94588 <unknown>\n#17 0x5608e7f94706 <unknown>\n#18 0x5608e7fae8b2 <unknown>\n#19 0x7fc9f943f609 <unknown>","statusTrace":"self = <tests.test_login.TestLogin object at 0x7f2a6e033df0>\n\n    @allure.description(\"valid login\")\n    @allure.title(\"Login with valid credentials test\")\n    @pytest.mark.run(order=1)\n    def test_valid_login(self):\n        username = self.config_reader.config_section_dict(\"Base Url\")[\"username\"]\n        password = self.config_reader.config_section_dict(\"Base Url\")[\"password\"]\n        self.pages['about_page'].click_login_link()\n>       self.pages['login_page'].login(username, password)\n\ntests/test_login.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:21: in login\n    self.fill_text(self.USERNAME_FIELD, username)\npages/base_page.py:24: in fill_text\n    el.send_keys(txt)\n/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:223: in send_keys\n    self._execute(Command.SEND_KEYS_TO_ELEMENT,\n/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:396: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2a6dff4670>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x5608e7f94706 \\\\u003Cunknown>\\\\n#18 0x5608e7fae8b2 \\\\u003Cunknown>\\\\n#19 0x7fc9f943f609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: headless chrome=106.0.5249.119)\nE       Stacktrace:\nE       #0 0x5608e7f222c3 <unknown>\nE       #1 0x5608e7d2b700 <unknown>\nE       #2 0x5608e7d5ed1e <unknown>\nE       #3 0x5608e7d5e2c4 <unknown>\nE       #4 0x5608e7d82f42 <unknown>\nE       #5 0x5608e7d59073 <unknown>\nE       #6 0x5608e7d830ae <unknown>\nE       #7 0x5608e7d9aa50 <unknown>\nE       #8 0x5608e7d82d63 <unknown>\nE       #9 0x5608e7d577e3 <unknown>\nE       #10 0x5608e7d58a21 <unknown>\nE       #11 0x5608e7f7018e <unknown>\nE       #12 0x5608e7f73622 <unknown>\nE       #13 0x5608e7f56aae <unknown>\nE       #14 0x5608e7f742a3 <unknown>\nE       #15 0x5608e7f4aecf <unknown>\nE       #16 0x5608e7f94588 <unknown>\nE       #17 0x5608e7f94706 <unknown>\nE       #18 0x5608e7fae8b2 <unknown>\nE       #19 0x7fc9f943f609 <unknown>\n\n/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"write_allure_environment","time":{"start":1666341021312,"stop":1666341021312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"prep_properties","time":{"start":1666341021312,"stop":1666341021312,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"create_driver","time":{"start":1666341021312,"stop":1666341036239,"duration":14927},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"pages","time":{"start":1666341036239,"stop":1666341036240,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"injector","time":{"start":1666341036240,"stop":1666341036240,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"valid login","status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=106.0.5249.119)\nStacktrace:\n#0 0x5608e7f222c3 <unknown>\n#1 0x5608e7d2b700 <unknown>\n#2 0x5608e7d5ed1e <unknown>\n#3 0x5608e7d5e2c4 <unknown>\n#4 0x5608e7d82f42 <unknown>\n#5 0x5608e7d59073 <unknown>\n#6 0x5608e7d830ae <unknown>\n#7 0x5608e7d9aa50 <unknown>\n#8 0x5608e7d82d63 <unknown>\n#9 0x5608e7d577e3 <unknown>\n#10 0x5608e7d58a21 <unknown>\n#11 0x5608e7f7018e <unknown>\n#12 0x5608e7f73622 <unknown>\n#13 0x5608e7f56aae <unknown>\n#14 0x5608e7f742a3 <unknown>\n#15 0x5608e7f4aecf <unknown>\n#16 0x5608e7f94588 <unknown>\n#17 0x5608e7f94706 <unknown>\n#18 0x5608e7fae8b2 <unknown>\n#19 0x7fc9f943f609 <unknown>","statusTrace":"self = <tests.test_login.TestLogin object at 0x7f2a6e033df0>\n\n    @allure.description(\"valid login\")\n    @allure.title(\"Login with valid credentials test\")\n    @pytest.mark.run(order=1)\n    def test_valid_login(self):\n        username = self.config_reader.config_section_dict(\"Base Url\")[\"username\"]\n        password = self.config_reader.config_section_dict(\"Base Url\")[\"password\"]\n        self.pages['about_page'].click_login_link()\n>       self.pages['login_page'].login(username, password)\n\ntests/test_login.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:21: in login\n    self.fill_text(self.USERNAME_FIELD, username)\npages/base_page.py:24: in fill_text\n    el.send_keys(txt)\n/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:223: in send_keys\n    self._execute(Command.SEND_KEYS_TO_ELEMENT,\n/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:396: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f2a6dff4670>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x5608e7f94706 \\\\u003Cunknown>\\\\n#18 0x5608e7fae8b2 \\\\u003Cunknown>\\\\n#19 0x7fc9f943f609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: headless chrome=106.0.5249.119)\nE       Stacktrace:\nE       #0 0x5608e7f222c3 <unknown>\nE       #1 0x5608e7d2b700 <unknown>\nE       #2 0x5608e7d5ed1e <unknown>\nE       #3 0x5608e7d5e2c4 <unknown>\nE       #4 0x5608e7d82f42 <unknown>\nE       #5 0x5608e7d59073 <unknown>\nE       #6 0x5608e7d830ae <unknown>\nE       #7 0x5608e7d9aa50 <unknown>\nE       #8 0x5608e7d82d63 <unknown>\nE       #9 0x5608e7d577e3 <unknown>\nE       #10 0x5608e7d58a21 <unknown>\nE       #11 0x5608e7f7018e <unknown>\nE       #12 0x5608e7f73622 <unknown>\nE       #13 0x5608e7f56aae <unknown>\nE       #14 0x5608e7f742a3 <unknown>\nE       #15 0x5608e7f4aecf <unknown>\nE       #16 0x5608e7f94588 <unknown>\nE       #17 0x5608e7f94706 <unknown>\nE       #18 0x5608e7fae8b2 <unknown>\nE       #19 0x7fc9f943f609 <unknown>\n\n/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementNotInteractableException","steps":[{"name":"Click Login link","time":{"start":1666341036241,"stop":1666341037164,"duration":923},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Log in with username: 'elias123@gmail.com' and password: 'El123456789'","time":{"start":1666341037165,"stop":1666341037346,"duration":181},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=106.0.5249.119)\nStacktrace:\n#0 0x5608e7f222c3 <unknown>\n#1 0x5608e7d2b700 <unknown>\n#2 0x5608e7d5ed1e <unknown>\n#3 0x5608e7d5e2c4 <unknown>\n#4 0x5608e7d82f42 <unknown>\n#5 0x5608e7d59073 <unknown>\n#6 0x5608e7d830ae <unknown>\n#7 0x5608e7d9aa50 <unknown>\n#8 0x5608e7d82d63 <unknown>\n#9 0x5608e7d577e3 <unknown>\n#10 0x5608e7d58a21 <unknown>\n#11 0x5608e7f7018e <unknown>\n#12 0x5608e7f73622 <unknown>\n#13 0x5608e7f56aae <unknown>\n#14 0x5608e7f742a3 <unknown>\n#15 0x5608e7f4aecf <unknown>\n#16 0x5608e7f94588 <unknown>\n#17 0x5608e7f94706 <unknown>\n#18 0x5608e7fae8b2 <unknown>\n#19 0x7fc9f943f609 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 180, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/login_page.py\", line 21, in login\n    self.fill_text(self.USERNAME_FIELD, username)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 24, in fill_text\n    el.send_keys(txt)\n  File \"/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py\", line 223, in send_keys\n    self._execute(Command.SEND_KEYS_TO_ELEMENT,\n  File \"/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py\", line 396, in _execute\n    return self._parent.execute(command, params)\n  File \"/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py\", line 243, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[{"name":"username","value":"'elias123@gmail.com'"},{"name":"password","value":"'El123456789'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"ab36669d8046c600","name":"stderr","source":"ab36669d8046c600.txt","type":"text/plain","size":160}],"parameters":[],"stepsCount":2,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"create_driver::0","time":{"start":1666341037425,"stop":1666341037598,"duration":173},"status":"passed","steps":[],"attachments":[{"uid":"a543a4f94192dc8a","name":"screenshot on failure: 21/10/2022, 08:30:37","source":"a543a4f94192dc8a.png","type":"image/png","size":44145},{"uid":"1826dedf4835a460","name":"public ip address","source":"1826dedf4835a460.txt","type":"text/plain","size":13}],"parameters":[],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"write_allure_environment::0","time":{"start":1666341092723,"stop":1666341092735,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"severity","value":"blocker"},{"name":"epic","value":"Security"},{"name":"feature","value":"Login"},{"name":"tag","value":"run(order=1)"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az311-987"},{"name":"thread","value":"2177-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security","run(order=1)"]},"source":"41da762f8ed59c6c.json","parameterValues":[]}