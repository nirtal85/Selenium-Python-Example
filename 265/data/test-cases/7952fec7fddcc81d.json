{"uid":"7952fec7fddcc81d","name":"Forgot Password with valid email test","fullName":"tests.test_forgot_password.TestForgotPassword#test_valid_email","historyId":"ad76d87e5a831f6b00837c8ab7fbb24e","time":{"start":1665318669367,"stop":1665318671230,"duration":1863},"description":"Forgot password with a valid email address","descriptionHtml":"<p>Forgot password with a valid email address</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://app.involve.me/password/reset\" class=\"darken\" style=\"\">...</a> is not clickable at point (68, 428). Other element would receive the click: <div class=\"mdc-checkbox\">...</div>\n  (Session info: headless chrome=106.0.5249.91)\nStacktrace:\n#0 0x5644ba0642c3 <unknown>\n#1 0x5644b9e6d83a <unknown>\n#2 0x5644b9eae3b4 <unknown>\n#3 0x5644b9eabd9c <unknown>\n#4 0x5644b9ea9384 <unknown>\n#5 0x5644b9ea7f36 <unknown>\n#6 0x5644b9e9b871 <unknown>\n#7 0x5644b9ec4f42 <unknown>\n#8 0x5644b9e9b073 <unknown>\n#9 0x5644b9ec50ae <unknown>\n#10 0x5644b9edca50 <unknown>\n#11 0x5644b9ec4d63 <unknown>\n#12 0x5644b9e997e3 <unknown>\n#13 0x5644b9e9aa21 <unknown>\n#14 0x5644ba0b218e <unknown>\n#15 0x5644ba0b5622 <unknown>\n#16 0x5644ba098aae <unknown>\n#17 0x5644ba0b62a3 <unknown>\n#18 0x5644ba08cecf <unknown>\n#19 0x5644ba0d6588 <unknown>\n#20 0x5644ba0d6706 <unknown>\n#21 0x5644ba0f08b2 <unknown>\n#22 0x7f0c9a957609 <unknown>","statusTrace":"self = <tests.test_forgot_password.TestForgotPassword object at 0x7f7e2c281610>\n\n    @allure.description(\"Forgot password with a valid email address\")\n    @allure.title(\"Forgot Password with valid email test\")\n    def test_valid_email(self):\n        email = self.config_reader.config_section_dict(\"Base Url\")[\"username\"]\n        self.pages['about_page'].click_login_link()\n>       self.pages['login_page'].click_forgot_password()\n\ntests/test_forgot_password.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:35: in click_forgot_password\n    self.click(self.FORGOT_PASSWORD_LINK)\npages/base_page.py:18: in click\n    el.click()\n/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:740: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7e2bd9b220>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5644ba0d6706 \\\\u003Cunknown>\\\\n#21 0x5644ba0f08b2 \\\\u003Cunknown>\\\\n#22 0x7f0c9a957609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://app.involve.me/password/reset\" class=\"darken\" style=\"\">...</a> is not clickable at point (68, 428). Other element would receive the click: <div class=\"mdc-checkbox\">...</div>\nE         (Session info: headless chrome=106.0.5249.91)\nE       Stacktrace:\nE       #0 0x5644ba0642c3 <unknown>\nE       #1 0x5644b9e6d83a <unknown>\nE       #2 0x5644b9eae3b4 <unknown>\nE       #3 0x5644b9eabd9c <unknown>\nE       #4 0x5644b9ea9384 <unknown>\nE       #5 0x5644b9ea7f36 <unknown>\nE       #6 0x5644b9e9b871 <unknown>\nE       #7 0x5644b9ec4f42 <unknown>\nE       #8 0x5644b9e9b073 <unknown>\nE       #9 0x5644b9ec50ae <unknown>\nE       #10 0x5644b9edca50 <unknown>\nE       #11 0x5644b9ec4d63 <unknown>\nE       #12 0x5644b9e997e3 <unknown>\nE       #13 0x5644b9e9aa21 <unknown>\nE       #14 0x5644ba0b218e <unknown>\nE       #15 0x5644ba0b5622 <unknown>\nE       #16 0x5644ba098aae <unknown>\nE       #17 0x5644ba0b62a3 <unknown>\nE       #18 0x5644ba08cecf <unknown>\nE       #19 0x5644ba0d6588 <unknown>\nE       #20 0x5644ba0d6706 <unknown>\nE       #21 0x5644ba0f08b2 <unknown>\nE       #22 0x7f0c9a957609 <unknown>\n\n/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:247: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"prep_properties","time":{"start":1665318621396,"stop":1665318621397,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"write_allure_environment","time":{"start":1665318621397,"stop":1665318621397,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"create_driver","time":{"start":1665318667674,"stop":1665318669365,"duration":1691},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"injector","time":{"start":1665318669366,"stop":1665318669366,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"pages","time":{"start":1665318669366,"stop":1665318669366,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Forgot password with a valid email address","status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://app.involve.me/password/reset\" class=\"darken\" style=\"\">...</a> is not clickable at point (68, 428). Other element would receive the click: <div class=\"mdc-checkbox\">...</div>\n  (Session info: headless chrome=106.0.5249.91)\nStacktrace:\n#0 0x5644ba0642c3 <unknown>\n#1 0x5644b9e6d83a <unknown>\n#2 0x5644b9eae3b4 <unknown>\n#3 0x5644b9eabd9c <unknown>\n#4 0x5644b9ea9384 <unknown>\n#5 0x5644b9ea7f36 <unknown>\n#6 0x5644b9e9b871 <unknown>\n#7 0x5644b9ec4f42 <unknown>\n#8 0x5644b9e9b073 <unknown>\n#9 0x5644b9ec50ae <unknown>\n#10 0x5644b9edca50 <unknown>\n#11 0x5644b9ec4d63 <unknown>\n#12 0x5644b9e997e3 <unknown>\n#13 0x5644b9e9aa21 <unknown>\n#14 0x5644ba0b218e <unknown>\n#15 0x5644ba0b5622 <unknown>\n#16 0x5644ba098aae <unknown>\n#17 0x5644ba0b62a3 <unknown>\n#18 0x5644ba08cecf <unknown>\n#19 0x5644ba0d6588 <unknown>\n#20 0x5644ba0d6706 <unknown>\n#21 0x5644ba0f08b2 <unknown>\n#22 0x7f0c9a957609 <unknown>","statusTrace":"self = <tests.test_forgot_password.TestForgotPassword object at 0x7f7e2c281610>\n\n    @allure.description(\"Forgot password with a valid email address\")\n    @allure.title(\"Forgot Password with valid email test\")\n    def test_valid_email(self):\n        email = self.config_reader.config_section_dict(\"Base Url\")[\"username\"]\n        self.pages['about_page'].click_login_link()\n>       self.pages['login_page'].click_forgot_password()\n\ntests/test_forgot_password.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:35: in click_forgot_password\n    self.click(self.FORGOT_PASSWORD_LINK)\npages/base_page.py:18: in click\n    el.click()\n/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:740: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7e2bd9b220>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5644ba0d6706 \\\\u003Cunknown>\\\\n#21 0x5644ba0f08b2 \\\\u003Cunknown>\\\\n#22 0x7f0c9a957609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://app.involve.me/password/reset\" class=\"darken\" style=\"\">...</a> is not clickable at point (68, 428). Other element would receive the click: <div class=\"mdc-checkbox\">...</div>\nE         (Session info: headless chrome=106.0.5249.91)\nE       Stacktrace:\nE       #0 0x5644ba0642c3 <unknown>\nE       #1 0x5644b9e6d83a <unknown>\nE       #2 0x5644b9eae3b4 <unknown>\nE       #3 0x5644b9eabd9c <unknown>\nE       #4 0x5644b9ea9384 <unknown>\nE       #5 0x5644b9ea7f36 <unknown>\nE       #6 0x5644b9e9b871 <unknown>\nE       #7 0x5644b9ec4f42 <unknown>\nE       #8 0x5644b9e9b073 <unknown>\nE       #9 0x5644b9ec50ae <unknown>\nE       #10 0x5644b9edca50 <unknown>\nE       #11 0x5644b9ec4d63 <unknown>\nE       #12 0x5644b9e997e3 <unknown>\nE       #13 0x5644b9e9aa21 <unknown>\nE       #14 0x5644ba0b218e <unknown>\nE       #15 0x5644ba0b5622 <unknown>\nE       #16 0x5644ba098aae <unknown>\nE       #17 0x5644ba0b62a3 <unknown>\nE       #18 0x5644ba08cecf <unknown>\nE       #19 0x5644ba0d6588 <unknown>\nE       #20 0x5644ba0d6706 <unknown>\nE       #21 0x5644ba0f08b2 <unknown>\nE       #22 0x7f0c9a957609 <unknown>\n\n/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:247: ElementClickInterceptedException","steps":[{"name":"Click Login link","time":{"start":1665318669368,"stop":1665318669786,"duration":418},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Click Forgot Password link","time":{"start":1665318669787,"stop":1665318671229,"duration":1442},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"https://app.involve.me/password/reset\" class=\"darken\" style=\"\">...</a> is not clickable at point (68, 428). Other element would receive the click: <div class=\"mdc-checkbox\">...</div>\n  (Session info: headless chrome=106.0.5249.91)\nStacktrace:\n#0 0x5644ba0642c3 <unknown>\n#1 0x5644b9e6d83a <unknown>\n#2 0x5644b9eae3b4 <unknown>\n#3 0x5644b9eabd9c <unknown>\n#4 0x5644b9ea9384 <unknown>\n#5 0x5644b9ea7f36 <unknown>\n#6 0x5644b9e9b871 <unknown>\n#7 0x5644b9ec4f42 <unknown>\n#8 0x5644b9e9b073 <unknown>\n#9 0x5644b9ec50ae <unknown>\n#10 0x5644b9edca50 <unknown>\n#11 0x5644b9ec4d63 <unknown>\n#12 0x5644b9e997e3 <unknown>\n#13 0x5644b9e9aa21 <unknown>\n#14 0x5644ba0b218e <unknown>\n#15 0x5644ba0b5622 <unknown>\n#16 0x5644ba098aae <unknown>\n#17 0x5644ba0b62a3 <unknown>\n#18 0x5644ba08cecf <unknown>\n#19 0x5644ba0d6588 <unknown>\n#20 0x5644ba0d6706 <unknown>\n#21 0x5644ba0f08b2 <unknown>\n#22 0x7f0c9a957609 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/login_page.py\", line 35, in click_forgot_password\n    self.click(self.FORGOT_PASSWORD_LINK)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 18, in click\n    el.click()\n  File \"/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py\", line 81, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py\", line 740, in _execute\n    return self._parent.execute(command, params)\n  File \"/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py\", line 430, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.9.14/x64/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"ea8c5f4a86401465","name":"log","source":"ea8c5f4a86401465.txt","type":"text/plain","size":366},{"uid":"ba5d517b1f6cf2e1","name":"stderr","source":"ba5d517b1f6cf2e1.txt","type":"text/plain","size":237}],"parameters":[],"stepsCount":2,"attachmentsCount":2,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"create_driver::0","time":{"start":1665318671270,"stop":1665318671424,"duration":154},"status":"passed","steps":[],"attachments":[{"uid":"4b2f58ee2902663d","name":"screenshot on failure: 09/10/2022, 12:31:11","source":"4b2f58ee2902663d.png","type":"image/png","size":44108},{"uid":"f835b7204b9766fd","name":"public ip address","source":"f835b7204b9766fd.txt","type":"text/plain","size":12}],"parameters":[],"stepsCount":0,"attachmentsCount":2,"shouldDisplayMessage":false,"hasContent":true},{"name":"write_allure_environment::0","time":{"start":1665318679027,"stop":1665318679037,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"story","value":"Forgot Password Feature's Functionality"},{"name":"severity","value":"critical"},{"name":"epic","value":"Security"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_forgot_password"},{"name":"subSuite","value":"TestForgotPassword"},{"name":"host","value":"fv-az246-506"},{"name":"thread","value":"2158-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_forgot_password"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security"]},"source":"7952fec7fddcc81d.json","parameterValues":[]}