{"uid":"ce5f98e388b357e","name":"Logout of system test","fullName":"tests.test_login.TestLogin#test_logout","historyId":"22bac01b3c7491378deafbf6e6797ba7","time":{"start":1677053607563,"stop":1677053609326,"duration":1763},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=110.0.5481.100)\nStacktrace:\n#0 0x55c641ff0d93 <unknown>\n#1 0x55c641dbf15d <unknown>\n#2 0x55c641df578c <unknown>\n#3 0x55c641df4f9e <unknown>\n#4 0x55c641e1f5f2 <unknown>\n#5 0x55c641df0873 <unknown>\n#6 0x55c641e1f81e <unknown>\n#7 0x55c641e37619 <unknown>\n#8 0x55c641e1f353 <unknown>\n#9 0x55c641deee40 <unknown>\n#10 0x55c641df0038 <unknown>\n#11 0x55c6420448be <unknown>\n#12 0x55c6420488f0 <unknown>\n#13 0x55c642028f90 <unknown>\n#14 0x55c642049b7d <unknown>\n#15 0x55c64201a578 <unknown>\n#16 0x55c64206e348 <unknown>\n#17 0x55c64206e4d6 <unknown>\n#18 0x55c642088341 <unknown>\n#19 0x7f412e9f9b43 <unknown>","statusTrace":"self = <tests.test_login.TestLogin object at 0x7f903c8d5ab0>\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user i want to be able to logout after a successful login.\")\n    @pytest.mark.run(order=2)\n    def test_logout(self):\n        username = self.config_reader.config_section_dict(\"Base Url\")[\"username\"]\n        password = self.config_reader.config_section_dict(\"Base Url\")[\"password\"]\n        # example of a simple text attachment\n        allure.attach(body=username, name=\"username\", attachment_type=allure.attachment_type.TEXT)\n        self.pages['about_page'].click_login_link()\n>       self.pages['login_page'].login(username, password)\n\ntests/test_login.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:22: in login\n    self.fill_text(self.PASSWORD_FIELD, password)\npages/base_page.py:25: in fill_text\n    el.send_keys(txt)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:230: in send_keys\n    self._execute(\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:403: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f903c77ef80>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x55c64206e4d6 \\\\u003Cunknown>\\\\n#18 0x55c642088341 \\\\u003Cunknown>\\\\n#19 0x7f412e9f9b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: headless chrome=110.0.5481.100)\nE       Stacktrace:\nE       #0 0x55c641ff0d93 <unknown>\nE       #1 0x55c641dbf15d <unknown>\nE       #2 0x55c641df578c <unknown>\nE       #3 0x55c641df4f9e <unknown>\nE       #4 0x55c641e1f5f2 <unknown>\nE       #5 0x55c641df0873 <unknown>\nE       #6 0x55c641e1f81e <unknown>\nE       #7 0x55c641e37619 <unknown>\nE       #8 0x55c641e1f353 <unknown>\nE       #9 0x55c641deee40 <unknown>\nE       #10 0x55c641df0038 <unknown>\nE       #11 0x55c6420448be <unknown>\nE       #12 0x55c6420488f0 <unknown>\nE       #13 0x55c642028f90 <unknown>\nE       #14 0x55c642049b7d <unknown>\nE       #15 0x55c64201a578 <unknown>\nE       #16 0x55c64206e348 <unknown>\nE       #17 0x55c64206e4d6 <unknown>\nE       #18 0x55c642088341 <unknown>\nE       #19 0x7f412e9f9b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"write_allure_environment","time":{"start":1677053595500,"stop":1677053595500,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"prep_properties","time":{"start":1677053595500,"stop":1677053595500,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"create_driver","time":{"start":1677053605355,"stop":1677053607562,"duration":2207},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"injector","time":{"start":1677053607562,"stop":1677053607563,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"pages","time":{"start":1677053607562,"stop":1677053607562,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=110.0.5481.100)\nStacktrace:\n#0 0x55c641ff0d93 <unknown>\n#1 0x55c641dbf15d <unknown>\n#2 0x55c641df578c <unknown>\n#3 0x55c641df4f9e <unknown>\n#4 0x55c641e1f5f2 <unknown>\n#5 0x55c641df0873 <unknown>\n#6 0x55c641e1f81e <unknown>\n#7 0x55c641e37619 <unknown>\n#8 0x55c641e1f353 <unknown>\n#9 0x55c641deee40 <unknown>\n#10 0x55c641df0038 <unknown>\n#11 0x55c6420448be <unknown>\n#12 0x55c6420488f0 <unknown>\n#13 0x55c642028f90 <unknown>\n#14 0x55c642049b7d <unknown>\n#15 0x55c64201a578 <unknown>\n#16 0x55c64206e348 <unknown>\n#17 0x55c64206e4d6 <unknown>\n#18 0x55c642088341 <unknown>\n#19 0x7f412e9f9b43 <unknown>","statusTrace":"self = <tests.test_login.TestLogin object at 0x7f903c8d5ab0>\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user i want to be able to logout after a successful login.\")\n    @pytest.mark.run(order=2)\n    def test_logout(self):\n        username = self.config_reader.config_section_dict(\"Base Url\")[\"username\"]\n        password = self.config_reader.config_section_dict(\"Base Url\")[\"password\"]\n        # example of a simple text attachment\n        allure.attach(body=username, name=\"username\", attachment_type=allure.attachment_type.TEXT)\n        self.pages['about_page'].click_login_link()\n>       self.pages['login_page'].login(username, password)\n\ntests/test_login.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/login_page.py:22: in login\n    self.fill_text(self.PASSWORD_FIELD, password)\npages/base_page.py:25: in fill_text\n    el.send_keys(txt)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:230: in send_keys\n    self._execute(\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:403: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f903c77ef80>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x55c64206e4d6 \\\\u003Cunknown>\\\\n#18 0x55c642088341 \\\\u003Cunknown>\\\\n#19 0x7f412e9f9b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: headless chrome=110.0.5481.100)\nE       Stacktrace:\nE       #0 0x55c641ff0d93 <unknown>\nE       #1 0x55c641dbf15d <unknown>\nE       #2 0x55c641df578c <unknown>\nE       #3 0x55c641df4f9e <unknown>\nE       #4 0x55c641e1f5f2 <unknown>\nE       #5 0x55c641df0873 <unknown>\nE       #6 0x55c641e1f81e <unknown>\nE       #7 0x55c641e37619 <unknown>\nE       #8 0x55c641e1f353 <unknown>\nE       #9 0x55c641deee40 <unknown>\nE       #10 0x55c641df0038 <unknown>\nE       #11 0x55c6420448be <unknown>\nE       #12 0x55c6420488f0 <unknown>\nE       #13 0x55c642028f90 <unknown>\nE       #14 0x55c642049b7d <unknown>\nE       #15 0x55c64201a578 <unknown>\nE       #16 0x55c64206e348 <unknown>\nE       #17 0x55c64206e4d6 <unknown>\nE       #18 0x55c642088341 <unknown>\nE       #19 0x7f412e9f9b43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:245: ElementNotInteractableException","steps":[{"name":"Click Login link","time":{"start":1677053607564,"stop":1677053608988,"duration":1424},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"Log in with username: 'elias123@gmail.com' and password: 'El123456789'","time":{"start":1677053608988,"stop":1677053609326,"duration":338},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=110.0.5481.100)\nStacktrace:\n#0 0x55c641ff0d93 <unknown>\n#1 0x55c641dbf15d <unknown>\n#2 0x55c641df578c <unknown>\n#3 0x55c641df4f9e <unknown>\n#4 0x55c641e1f5f2 <unknown>\n#5 0x55c641df0873 <unknown>\n#6 0x55c641e1f81e <unknown>\n#7 0x55c641e37619 <unknown>\n#8 0x55c641e1f353 <unknown>\n#9 0x55c641deee40 <unknown>\n#10 0x55c641df0038 <unknown>\n#11 0x55c6420448be <unknown>\n#12 0x55c6420488f0 <unknown>\n#13 0x55c642028f90 <unknown>\n#14 0x55c642049b7d <unknown>\n#15 0x55c64201a578 <unknown>\n#16 0x55c64206e348 <unknown>\n#17 0x55c64206e4d6 <unknown>\n#18 0x55c642088341 <unknown>\n#19 0x7f412e9f9b43 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/login_page.py\", line 22, in login\n    self.fill_text(self.PASSWORD_FIELD, password)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 25, in fill_text\n    el.send_keys(txt)\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 230, in send_keys\n    self._execute(\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py\", line 403, in _execute\n    return self._parent.execute(command, params)\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[{"name":"username","value":"'elias123@gmail.com'"},{"name":"password","value":"'El123456789'"}],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"f74136aff3b45105","name":"username","source":"f74136aff3b45105.txt","type":"text/plain","size":18}],"parameters":[],"stepsCount":2,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"create_driver::0","time":{"start":1677053609368,"stop":1677053609630,"duration":262},"status":"passed","steps":[],"attachments":[{"uid":"24c6f7d78a0e5364","name":"Screenshot","source":"24c6f7d78a0e5364.png","type":"image/png","size":60086},{"uid":"5016c1440508912d","name":"URL","source":"5016c1440508912d.uri","type":"text/uri-list","size":89},{"uid":"ac1ac3444a09ca38","name":"public ip address","source":"ac1ac3444a09ca38.txt","type":"text/plain","size":13},{"uid":"72113228fe96f","name":"Cookies","source":"72113228fe96f.json","type":"application/json","size":4131},{"uid":"eb6c5467b614f323","name":"Session Storage","source":"eb6c5467b614f323.json","type":"application/json","size":45},{"uid":"7613392fa3124f25","name":"Local Storage","source":"7613392fa3124f25.json","type":"application/json","size":2},{"uid":"3d57e14558a1a61b","name":"Console Logs","source":"3d57e14558a1a61b.json","type":"application/json","size":4071},{"uid":"3ba3a9c39be2ebdf","name":"Network Logs","source":"3ba3a9c39be2ebdf.json","type":"application/json","size":86347}],"parameters":[],"stepsCount":0,"attachmentsCount":8,"shouldDisplayMessage":false,"hasContent":true},{"name":"write_allure_environment::0","time":{"start":1677053701273,"stop":1677053701280,"duration":7},"status":"broken","statusMessage":"TypeError: HEAD is a detached symbolic reference as it points to 'ced31647ff3fdc4ebac3b49a428fc3ab6255c809'\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/allure_commons/_allure.py\", line 221, in __call__\n    return self._fixture_function(*args, **kwargs)\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/_pytest/fixtures.py\", line 917, in _teardown_yield_fixture\n    next(it)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/tests/conftest.py\", line 53, in write_allure_environment\n    \"Branch\": repo.active_branch.name\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/git/repo/base.py\", line 896, in active_branch\n    return self.head.reference\n  File \"/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/git/refs/symbolic.py\", line 309, in _get_reference\n    raise TypeError(\"%s is a detached symbolic reference as it points to %r\" % (self, sha))\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"labels":[{"name":"epic","value":"Security"},{"name":"story","value":"As a user i want to be able to logout after a successful login."},{"name":"feature","value":"Login"},{"name":"severity","value":"blocker"},{"name":"tag","value":"run(order=2)"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az613-804"},{"name":"thread","value":"2153-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["run(order=2)","security"]},"source":"ce5f98e388b357e.json","parameterValues":[]}