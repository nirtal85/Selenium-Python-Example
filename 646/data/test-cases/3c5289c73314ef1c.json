{"uid":"3c5289c73314ef1c","name":"Logout of system test","fullName":"tests.login_test.TestLogin#test_logout","historyId":"36eff8f3c0149bb18968fa49bc3c1dfe","time":{"start":1746669164945,"stop":1746669175398,"duration":10453},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5615b844253a <unknown>\n#1 0x5615b7f3df00 <unknown>\n#2 0x5615b7f8dc0c <unknown>\n#3 0x5615b7f8de31 <unknown>\n#4 0x5615b7fd3bd4 <unknown>\n#5 0x5615b7fb25cd <unknown>\n#6 0x5615b7fd0f84 <unknown>\n#7 0x5615b7fb2343 <unknown>\n#8 0x5615b7f7f78a <unknown>\n#9 0x5615b7f809de <unknown>\n#10 0x5615b840c2cb <unknown>\n#11 0x5615b8410242 <unknown>\n#12 0x5615b83f97ac <unknown>\n#13 0x5615b8410df7 <unknown>\n#14 0x5615b83ddb2f <unknown>\n#15 0x5615b84311a8 <unknown>\n#16 0x5615b8431370 <unknown>\n#17 0x5615b84413b6 <unknown>\n#18 0x7f6a8aa9caa4 <unknown>\n#19 0x7f6a8ab29c3c <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7fa4e8005a30>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\"password\", \"qwerty\", mode=allure.parameter_mode.MASKED)\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:18: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:59: in click\n    el: WebElement = self.wait.until(expected_conditions.element_to_be_clickable(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"53f5005dcb137b74ebd839fc1920c0c5\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7fa4e8078180>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x5615b844253a <unknown>\nE       #1 0x5615b7f3df00 <unknown>\nE       #2 0x5615b7f8dc0c <unknown>\nE       #3 0x5615b7f8de31 <unknown>\nE       #4 0x5615b7fd3bd4 <unknown>\nE       #5 0x5615b7fb25cd <unknown>\nE       #6 0x5615b7fd0f84 <unknown>\nE       #7 0x5615b7fb2343 <unknown>\nE       #8 0x5615b7f7f78a <unknown>\nE       #9 0x5615b7f809de <unknown>\nE       #10 0x5615b840c2cb <unknown>\nE       #11 0x5615b8410242 <unknown>\nE       #12 0x5615b83f97ac <unknown>\nE       #13 0x5615b8410df7 <unknown>\nE       #14 0x5615b83ddb2f <unknown>\nE       #15 0x5615b84311a8 <unknown>\nE       #16 0x5615b8431370 <unknown>\nE       #17 0x5615b84413b6 <unknown>\nE       #18 0x7f6a8aa9caa4 <unknown>\nE       #19 0x7f6a8ab29c3c <unknown>\n\n.venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1746669105892,"stop":1746669105892,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"data","time":{"start":1746669105892,"stop":1746669105893,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746669105892,"stop":1746669105892,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"session_request","time":{"start":1746669105892,"stop":1746669105892,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5615b844253a <unknown>\n#1 0x5615b7f3df00 <unknown>\n#2 0x5615b7f8dc0c <unknown>\n#3 0x5615b7f8de31 <unknown>\n#4 0x5615b7fd3bd4 <unknown>\n#5 0x5615b7fb25cd <unknown>\n#6 0x5615b7fd0f84 <unknown>\n#7 0x5615b7fb2343 <unknown>\n#8 0x5615b7f7f78a <unknown>\n#9 0x5615b7f809de <unknown>\n#10 0x5615b840c2cb <unknown>\n#11 0x5615b8410242 <unknown>\n#12 0x5615b83f97ac <unknown>\n#13 0x5615b8410df7 <unknown>\n#14 0x5615b83ddb2f <unknown>\n#15 0x5615b84311a8 <unknown>\n#16 0x5615b8431370 <unknown>\n#17 0x5615b84413b6 <unknown>\n#18 0x7f6a8aa9caa4 <unknown>\n#19 0x7f6a8ab29c3c <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7fa4e8005a30>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\"password\", \"qwerty\", mode=allure.parameter_mode.MASKED)\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:18: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:59: in click\n    el: WebElement = self.wait.until(expected_conditions.element_to_be_clickable(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"53f5005dcb137b74ebd839fc1920c0c5\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7fa4e8078180>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x5615b844253a <unknown>\nE       #1 0x5615b7f3df00 <unknown>\nE       #2 0x5615b7f8dc0c <unknown>\nE       #3 0x5615b7f8de31 <unknown>\nE       #4 0x5615b7fd3bd4 <unknown>\nE       #5 0x5615b7fb25cd <unknown>\nE       #6 0x5615b7fd0f84 <unknown>\nE       #7 0x5615b7fb2343 <unknown>\nE       #8 0x5615b7f7f78a <unknown>\nE       #9 0x5615b7f809de <unknown>\nE       #10 0x5615b840c2cb <unknown>\nE       #11 0x5615b8410242 <unknown>\nE       #12 0x5615b83f97ac <unknown>\nE       #13 0x5615b8410df7 <unknown>\nE       #14 0x5615b83ddb2f <unknown>\nE       #15 0x5615b84311a8 <unknown>\nE       #16 0x5615b8431370 <unknown>\nE       #17 0x5615b84413b6 <unknown>\nE       #18 0x7f6a8aa9caa4 <unknown>\nE       #19 0x7f6a8ab29c3c <unknown>\n\n.venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1746669164946,"stop":1746669175397,"duration":10451},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5615b844253a <unknown>\n#1 0x5615b7f3df00 <unknown>\n#2 0x5615b7f8dc0c <unknown>\n#3 0x5615b7f8de31 <unknown>\n#4 0x5615b7fd3bd4 <unknown>\n#5 0x5615b7fb25cd <unknown>\n#6 0x5615b7fd0f84 <unknown>\n#7 0x5615b7fb2343 <unknown>\n#8 0x5615b7f7f78a <unknown>\n#9 0x5615b7f809de <unknown>\n#10 0x5615b840c2cb <unknown>\n#11 0x5615b8410242 <unknown>\n#12 0x5615b83f97ac <unknown>\n#13 0x5615b8410df7 <unknown>\n#14 0x5615b83ddb2f <unknown>\n#15 0x5615b84311a8 <unknown>\n#16 0x5615b8431370 <unknown>\n#17 0x5615b84413b6 <unknown>\n#18 0x7f6a8aa9caa4 <unknown>\n#19 0x7f6a8ab29c3c <unknown>\n\n","statusTrace":"  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 18, in click_login_link\n    self.click(self.LOGIN_LINK)\n    ~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 59, in click\n    el: WebElement = self.wait.until(expected_conditions.element_to_be_clickable(locator))\n                     ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py\", line 146, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"public ip address","time":{"start":1746669175407,"stop":1746669175417,"duration":10},"status":"passed","steps":[],"attachments":[{"uid":"a1d3c92aa2687078","name":"HTTP logs of http://checkip.amazonaws.com/","source":"a1d3c92aa2687078.txt","type":"text/plain","size":357}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"b0ddfe7aef254420","name":"HTML Attachment Example","source":"b0ddfe7aef254420.html","type":"text/html","size":32},{"uid":"6561c7b2ebe3652f","name":"File Attachment Example","source":"6561c7b2ebe3652f.png","type":"image/png","size":14730},{"uid":"ddc69122e19ba35b","name":"Text Attachment Example","source":"ddc69122e19ba35b.txt","type":"text/plain","size":17},{"uid":"3be5f360b3db1a8d","name":"CSV Attachment Example","source":"3be5f360b3db1a8d.csv","type":"text/csv","size":32},{"uid":"e4daf22b2febe907","name":"JSON Attachment Example","source":"e4daf22b2febe907.json","type":"application/json","size":31},{"uid":"850c38e7db64a3c4","name":"XML Attachment Example","source":"850c38e7db64a3c4.xml","type":"application/xml","size":140},{"uid":"543e81ee7cfc6481","name":"URI List Attachment Example","source":"543e81ee7cfc6481.uri","type":"text/uri-list","size":70},{"uid":"5c0ec0f93c1d2f1c","name":"Cookies","source":"5c0ec0f93c1d2f1c.json","type":"application/json","size":4117},{"uid":"491888bb60d230b","name":"Session Storage","source":"491888bb60d230b.json","type":"application/json","size":359},{"uid":"d984512b026d7067","name":"Local Storage","source":"d984512b026d7067.json","type":"application/json","size":548},{"uid":"66f39642c78fb3f8","name":"Full Page Screenshot","source":"66f39642c78fb3f8.png","type":"image/png","size":1356628},{"uid":"600a584e3d8b1a43","name":"URL","source":"600a584e3d8b1a43.uri","type":"text/uri-list","size":23},{"uid":"8b3e167a4f4fbab0","name":"Network Logs","source":"8b3e167a4f4fbab0.json","type":"application/json","size":59550}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":14,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"session_request::0","time":{"start":1746669177903,"stop":1746669177904,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Login"},{"name":"epic","value":"Security"},{"name":"story","value":"As a user I want to be able to logout after a successful login."},{"name":"severity","value":"blocker"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"login_test"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az2035-296"},{"name":"thread","value":"2041-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.login_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"******"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security"]},"source":"3c5289c73314ef1c.json","parameterValues":["******"]}