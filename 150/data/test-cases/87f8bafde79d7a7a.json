{"uid":"87f8bafde79d7a7a","name":"Logout of system test","fullName":"tests.login_test.TestLogin#test_logout","historyId":"253b8cd04e8df47a648d389068550cde","time":{"start":1704072104677,"stop":1704072114931,"duration":10254},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x556669d51d33 <unknown>\n#1 0x556669a0ef87 <unknown>\n#2 0x556669a5ec0e <unknown>\n#3 0x556669a5ed11 <unknown>\n#4 0x556669aaa004 <unknown>\n#5 0x556669a8836d <unknown>\n#6 0x556669aa7297 <unknown>\n#7 0x556669a880e3 <unknown>\n#8 0x556669a50044 <unknown>\n#9 0x556669a5144e <unknown>\n#10 0x556669d16861 <unknown>\n#11 0x556669d1a785 <unknown>\n#12 0x556669d04285 <unknown>\n#13 0x556669d1b41f <unknown>\n#14 0x556669ce820f <unknown>\n#15 0x556669d3f028 <unknown>\n#16 0x556669d3f1f7 <unknown>\n#17 0x556669d50ed4 <unknown>\n#18 0x7fd700294ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f0df1d45310>\njson_data = {'forgot_password': {'error_message': \"We can't find a user with that e-mail address.\", 'success_message': 'A reset li...you page', 'name': 'test', 'new_name': 'another test', 'no_project_found_msg': 'No project matches the criteria', ...}}\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, json_data: dict):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param json_data: A dictionary containing JSON data.\n        :type json_data: dict\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Path(Path(__file__).absolute().parent.parent, \"data\", \"dog.png\"),\n            name=\"Attach file example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"TXT example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"some attachment name\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:38: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c48da3fe494e78ea0f2321fc49083a0c\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f0df1e01580>\nmessage = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x556669d51d33 <unknown>\nE       #1 0x556669a0ef87 <unknown>\nE       #2 0x556669a5ec0e <unknown>\nE       #3 0x556669a5ed11 <unknown>\nE       #4 0x556669aaa004 <unknown>\nE       #5 0x556669a8836d <unknown>\nE       #6 0x556669aa7297 <unknown>\nE       #7 0x556669a880e3 <unknown>\nE       #8 0x556669a50044 <unknown>\nE       #9 0x556669a5144e <unknown>\nE       #10 0x556669d16861 <unknown>\nE       #11 0x556669d1a785 <unknown>\nE       #12 0x556669d04285 <unknown>\nE       #13 0x556669d1b41f <unknown>\nE       #14 0x556669ce820f <unknown>\nE       #15 0x556669d3f028 <unknown>\nE       #16 0x556669d3f1f7 <unknown>\nE       #17 0x556669d50ed4 <unknown>\nE       #18 0x7fd700294ac3 <unknown>\n\n.venv/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:101: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"json_data","time":{"start":1704071906489,"stop":1704071906489,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1704071906489,"stop":1704071906489,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1704071906489,"stop":1704071906489,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x556669d51d33 <unknown>\n#1 0x556669a0ef87 <unknown>\n#2 0x556669a5ec0e <unknown>\n#3 0x556669a5ed11 <unknown>\n#4 0x556669aaa004 <unknown>\n#5 0x556669a8836d <unknown>\n#6 0x556669aa7297 <unknown>\n#7 0x556669a880e3 <unknown>\n#8 0x556669a50044 <unknown>\n#9 0x556669a5144e <unknown>\n#10 0x556669d16861 <unknown>\n#11 0x556669d1a785 <unknown>\n#12 0x556669d04285 <unknown>\n#13 0x556669d1b41f <unknown>\n#14 0x556669ce820f <unknown>\n#15 0x556669d3f028 <unknown>\n#16 0x556669d3f1f7 <unknown>\n#17 0x556669d50ed4 <unknown>\n#18 0x7fd700294ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f0df1d45310>\njson_data = {'forgot_password': {'error_message': \"We can't find a user with that e-mail address.\", 'success_message': 'A reset li...you page', 'name': 'test', 'new_name': 'another test', 'no_project_found_msg': 'No project matches the criteria', ...}}\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, json_data: dict):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param json_data: A dictionary containing JSON data.\n        :type json_data: dict\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Path(Path(__file__).absolute().parent.parent, \"data\", \"dog.png\"),\n            name=\"Attach file example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"TXT example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"some attachment name\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:38: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c48da3fe494e78ea0f2321fc49083a0c\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f0df1e01580>\nmessage = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x556669d51d33 <unknown>\nE       #1 0x556669a0ef87 <unknown>\nE       #2 0x556669a5ec0e <unknown>\nE       #3 0x556669a5ed11 <unknown>\nE       #4 0x556669aaa004 <unknown>\nE       #5 0x556669a8836d <unknown>\nE       #6 0x556669aa7297 <unknown>\nE       #7 0x556669a880e3 <unknown>\nE       #8 0x556669a50044 <unknown>\nE       #9 0x556669a5144e <unknown>\nE       #10 0x556669d16861 <unknown>\nE       #11 0x556669d1a785 <unknown>\nE       #12 0x556669d04285 <unknown>\nE       #13 0x556669d1b41f <unknown>\nE       #14 0x556669ce820f <unknown>\nE       #15 0x556669d3f028 <unknown>\nE       #16 0x556669d3f1f7 <unknown>\nE       #17 0x556669d50ed4 <unknown>\nE       #18 0x7fd700294ac3 <unknown>\n\n.venv/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:101: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1704072104678,"stop":1704072114930,"duration":10252},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x556669d51d33 <unknown>\n#1 0x556669a0ef87 <unknown>\n#2 0x556669a5ec0e <unknown>\n#3 0x556669a5ed11 <unknown>\n#4 0x556669aaa004 <unknown>\n#5 0x556669a8836d <unknown>\n#6 0x556669aa7297 <unknown>\n#7 0x556669a880e3 <unknown>\n#8 0x556669a50044 <unknown>\n#9 0x556669a5144e <unknown>\n#10 0x556669d16861 <unknown>\n#11 0x556669d1a785 <unknown>\n#12 0x556669d04285 <unknown>\n#13 0x556669d1b41f <unknown>\n#14 0x556669ce820f <unknown>\n#15 0x556669d3f028 <unknown>\n#16 0x556669d3f1f7 <unknown>\n#17 0x556669d50ed4 <unknown>\n#18 0x7fd700294ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 20, in click_login_link\n    self.click(self.LOGIN_LINK)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 38, in click\n    el: WebElement = self.wait.until(\n                     ^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.11/site-packages/selenium/webdriver/support/wait.py\", line 101, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"36fc57f6e2e6b6c9","name":"HTML example","source":"36fc57f6e2e6b6c9.html","type":"text/html","size":32},{"uid":"c4e0a1f13df65bbc","name":"Attach file example","source":"c4e0a1f13df65bbc.png","type":"image/png","size":14730},{"uid":"2777f990ffa8600b","name":"TXT example","source":"2777f990ffa8600b.txt","type":"text/plain","size":17},{"uid":"2cd3011505c8eca9","name":"CSV example","source":"2cd3011505c8eca9.csv","type":"text/csv","size":32},{"uid":"2fc23d61fc72be99","name":"JSON example","source":"2fc23d61fc72be99.json","type":"application/json","size":31},{"uid":"dde2bd3732642ecb","name":"some attachment name","source":"dde2bd3732642ecb.xml","type":"application/xml","size":140},{"uid":"a8a09247a49b3840","name":"URI List example","source":"a8a09247a49b3840.uri","type":"text/uri-list","size":70},{"uid":"e8160ae3d59971d3","name":"public ip address","source":"e8160ae3d59971d3.txt","type":"text/plain","size":14},{"uid":"875adfbddcc147a6","name":"Cookies","source":"875adfbddcc147a6.json","type":"application/json","size":4405},{"uid":"68ea0d91cd104b7e","name":"Session Storage","source":"68ea0d91cd104b7e.json","type":"application/json","size":358},{"uid":"12e4ba67a21202a4","name":"Local Storage","source":"12e4ba67a21202a4.json","type":"application/json","size":208},{"uid":"37f6cb6ebcce98ae","name":"Console Logs","source":"37f6cb6ebcce98ae.json","type":"application/json","size":2},{"uid":"b975bd5b70109faa","name":"Full Page Screenshot","source":"b975bd5b70109faa.png","type":"image/png","size":1283197},{"uid":"9ff6d4945e2e846a","name":"URL","source":"9ff6d4945e2e846a.uri","type":"text/uri-list","size":23},{"uid":"b6710809b7d232c5","name":"Network Logs","source":"b6710809b7d232c5.json","type":"application/json","size":22910}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":15,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"feature","value":"Login"},{"name":"story","value":"As a user I want to be able to logout after a successful login."},{"name":"epic","value":"Security"},{"name":"severity","value":"blocker"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"login_test"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az1240-349"},{"name":"thread","value":"2186-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.login_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"******"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security"]},"source":"87f8bafde79d7a7a.json","parameterValues":["******"]}