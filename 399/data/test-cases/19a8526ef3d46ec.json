{"uid":"19a8526ef3d46ec","name":"Logout of system test","fullName":"tests.login_test.TestLogin#test_logout","historyId":"3e575a6c6c7352769d66ad6f44b2dd95","time":{"start":1725585962443,"stop":1725585972736,"duration":10293},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x561663c848da <unknown>\n#1 0x561663952e50 <unknown>\n#2 0x5616639a2644 <unknown>\n#3 0x5616639a2931 <unknown>\n#4 0x5616639e8534 <unknown>\n#5 0x5616639c74bd <unknown>\n#6 0x5616639e59c6 <unknown>\n#7 0x5616639c7233 <unknown>\n#8 0x561663995093 <unknown>\n#9 0x56166399609e <unknown>\n#10 0x561663c4bb3b <unknown>\n#11 0x561663c4faf1 <unknown>\n#12 0x561663c37705 <unknown>\n#13 0x561663c50662 <unknown>\n#14 0x561663c1c8df <unknown>\n#15 0x561663c736d8 <unknown>\n#16 0x561663c738a2 <unknown>\n#17 0x561663c836cc <unknown>\n#18 0x7fea10e94ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f8e7614a990>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ed34ed5d9117790d442fc7700b992309\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f8e7555d8a0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x561663c848da <unknown>\nE       #1 0x561663952e50 <unknown>\nE       #2 0x5616639a2644 <unknown>\nE       #3 0x5616639a2931 <unknown>\nE       #4 0x5616639e8534 <unknown>\nE       #5 0x5616639c74bd <unknown>\nE       #6 0x5616639e59c6 <unknown>\nE       #7 0x5616639c7233 <unknown>\nE       #8 0x561663995093 <unknown>\nE       #9 0x56166399609e <unknown>\nE       #10 0x561663c4bb3b <unknown>\nE       #11 0x561663c4faf1 <unknown>\nE       #12 0x561663c37705 <unknown>\nE       #13 0x561663c50662 <unknown>\nE       #14 0x561663c1c8df <unknown>\nE       #15 0x561663c736d8 <unknown>\nE       #16 0x561663c738a2 <unknown>\nE       #17 0x561663c836cc <unknown>\nE       #18 0x7fea10e94ac3 <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x561663c848da <unknown>\n#1 0x561663952e50 <unknown>\n#2 0x5616639a2644 <unknown>\n#3 0x5616639a2931 <unknown>\n#4 0x5616639e8534 <unknown>\n#5 0x5616639c74bd <unknown>\n#6 0x5616639e59c6 <unknown>\n#7 0x5616639c7233 <unknown>\n#8 0x561663995093 <unknown>\n#9 0x56166399609e <unknown>\n#10 0x561663c4bb3b <unknown>\n#11 0x561663c4faf1 <unknown>\n#12 0x561663c37705 <unknown>\n#13 0x561663c50662 <unknown>\n#14 0x561663c1c8df <unknown>\n#15 0x561663c736d8 <unknown>\n#16 0x561663c738a2 <unknown>\n#17 0x561663c836cc <unknown>\n#18 0x7fea10e94ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f8e7614a990>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ed34ed5d9117790d442fc7700b992309\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f8e7555d8a0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x561663c848da <unknown>\nE       #1 0x561663952e50 <unknown>\nE       #2 0x5616639a2644 <unknown>\nE       #3 0x5616639a2931 <unknown>\nE       #4 0x5616639e8534 <unknown>\nE       #5 0x5616639c74bd <unknown>\nE       #6 0x5616639e59c6 <unknown>\nE       #7 0x5616639c7233 <unknown>\nE       #8 0x561663995093 <unknown>\nE       #9 0x56166399609e <unknown>\nE       #10 0x561663c4bb3b <unknown>\nE       #11 0x561663c4faf1 <unknown>\nE       #12 0x561663c37705 <unknown>\nE       #13 0x561663c50662 <unknown>\nE       #14 0x561663c1c8df <unknown>\nE       #15 0x561663c736d8 <unknown>\nE       #16 0x561663c738a2 <unknown>\nE       #17 0x561663c836cc <unknown>\nE       #18 0x7fea10e94ac3 <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1725585962444,"stop":1725585972736,"duration":10292},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x561663c848da <unknown>\n#1 0x561663952e50 <unknown>\n#2 0x5616639a2644 <unknown>\n#3 0x5616639a2931 <unknown>\n#4 0x5616639e8534 <unknown>\n#5 0x5616639c74bd <unknown>\n#6 0x5616639e59c6 <unknown>\n#7 0x5616639c7233 <unknown>\n#8 0x561663995093 <unknown>\n#9 0x56166399609e <unknown>\n#10 0x561663c4bb3b <unknown>\n#11 0x561663c4faf1 <unknown>\n#12 0x561663c37705 <unknown>\n#13 0x561663c50662 <unknown>\n#14 0x561663c1c8df <unknown>\n#15 0x561663c736d8 <unknown>\n#16 0x561663c738a2 <unknown>\n#17 0x561663c836cc <unknown>\n#18 0x7fea10e94ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 20, in click_login_link\n    self.click(self.LOGIN_LINK)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 60, in click\n    el: WebElement = self.wait.until(\n                     ^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"public ip address","time":{"start":1725585972746,"stop":1725585972816,"duration":70},"status":"passed","steps":[],"attachments":[{"uid":"238609f286dfdc9c","name":"HTTP logs of http://checkip.amazonaws.com/","source":"238609f286dfdc9c.txt","type":"text/plain","size":359}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"f4de958e3f1857d2","name":"HTML Attachment Example","source":"f4de958e3f1857d2.html","type":"text/html","size":32},{"uid":"fface7b2bf2ab6ae","name":"File Attachment Example","source":"fface7b2bf2ab6ae.png","type":"image/png","size":14730},{"uid":"6cbaceed2a716e1c","name":"Text Attachment Example","source":"6cbaceed2a716e1c.txt","type":"text/plain","size":17},{"uid":"6d1cd7f119a38a3d","name":"CSV Attachment Example","source":"6d1cd7f119a38a3d.csv","type":"text/csv","size":32},{"uid":"7b0b43bf0d5f4b1b","name":"JSON Attachment Example","source":"7b0b43bf0d5f4b1b.json","type":"application/json","size":31},{"uid":"23ff178956d06ffc","name":"XML Attachment Example","source":"23ff178956d06ffc.xml","type":"application/xml","size":140},{"uid":"1260ce9277cd01ab","name":"URI List Attachment Example","source":"1260ce9277cd01ab.uri","type":"text/uri-list","size":70},{"uid":"957dcbb7cccc10bb","name":"Cookies","source":"957dcbb7cccc10bb.json","type":"application/json","size":3583},{"uid":"6ac3b7963862c2fb","name":"Session Storage","source":"6ac3b7963862c2fb.json","type":"application/json","size":359},{"uid":"d55ffe8e64366e3b","name":"Local Storage","source":"d55ffe8e64366e3b.json","type":"application/json","size":350},{"uid":"a287168017b5a8a","name":"Console Logs","source":"a287168017b5a8a.json","type":"application/json","size":236},{"uid":"7608ccc7a9e4917d","name":"Full Page Screenshot","source":"7608ccc7a9e4917d.png","type":"image/png","size":4647485},{"uid":"3806cdfd35df45d0","name":"URL","source":"3806cdfd35df45d0.uri","type":"text/uri-list","size":23},{"uid":"c9d85f5b2b4a2e51","name":"Network Logs","source":"c9d85f5b2b4a2e51.json","type":"application/json","size":66099}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":15,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"As a user I want to be able to logout after a successful login."},{"name":"severity","value":"blocker"},{"name":"epic","value":"Security"},{"name":"feature","value":"Login"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"login_test"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az1490-184"},{"name":"thread","value":"1942-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.login_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"******"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security"]},"source":"19a8526ef3d46ec.json","parameterValues":["******"]}