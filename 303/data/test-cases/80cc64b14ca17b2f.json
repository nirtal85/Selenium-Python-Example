{"uid":"80cc64b14ca17b2f","name":"test_sanity","fullName":"tests.login_test.TestLogin#test_sanity","historyId":"46d3af942e19630c008f2c5eb8d06efb","time":{"start":1706992498086,"stop":1706992498086,"duration":0},"description":"Basic sanity","descriptionHtml":"<p>Basic sanity</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.834\n  (Session info: chrome=121.0.6167.139)\nStacktrace:\n#0 0x555c9d4f6d93 <unknown>\n#1 0x555c9d1da337 <unknown>\n#2 0x555c9d1c1513 <unknown>\n#3 0x555c9d1c1557 <unknown>\n#4 0x555c9d1bfc1a <unknown>\n#5 0x555c9d1c033f <unknown>\n#6 0x555c9d1d03b1 <unknown>\n#7 0x555c9d1e64d1 <unknown>\n#8 0x555c9d1eb01b <unknown>\n#9 0x555c9d1c09e9 <unknown>\n#10 0x555c9d1e6221 <unknown>\n#11 0x555c9d267493 <unknown>\n#12 0x555c9d2481e3 <unknown>\n#13 0x555c9d218135 <unknown>\n#14 0x555c9d21913e <unknown>\n#15 0x555c9d4bae4b <unknown>\n#16 0x555c9d4bedfa <unknown>\n#17 0x555c9d4a76d5 <unknown>\n#18 0x555c9d4bfa6f <unknown>\n#19 0x555c9d48b69f <unknown>\n#20 0x555c9d4e4098 <unknown>\n#21 0x555c9d4e4262 <unknown>\n#22 0x555c9d4f5f34 <unknown>\n#23 0x7fc71d694ac3 <unknown>","statusTrace":"item = <Function test_sanity>\n\n    def pytest_runtest_setup(item: Item) -> None:\n        global browser, driver, chrome_options, wait\n        browser = item.config.getoption(\"browser\")\n        base_url = item.config.getoption(\"base_url\")\n        if browser in (\"chrome\", \"chrome_headless\"):\n            chrome_options = webdriver.ChromeOptions()\n            chrome_options.set_capability(\n                \"goog:loggingPrefs\", {\"performance\": \"ALL\", \"browser\": \"ALL\"}\n            )\n            chrome_options.add_experimental_option(\"excludeSwitches\", [\"enable-automation\"])\n            chrome_options.add_experimental_option(\n                \"prefs\",\n                {\n                    \"profile.default_content_setting_values.notifications\": 2,\n                    \"profile.default_content_setting_values.media_stream_mic\": 1,\n                    \"profile.default_content_setting_values.geolocation\": 1,\n                    \"profile.default_content_setting_values.media_stream_camera\": 1,\n                    \"credentials_enable_service\": False,\n                    \"profile.password_manager_enabled\": False,\n                    \"download.default_directory\": os.path.abspath(\n                        Constants.CHROME_DOWNLOAD_DIRECTORY.absolute().as_posix()\n                    ),\n                },\n            )\n            chrome_options.add_argument(\"disable-dev-shm-usage\")\n            chrome_options.add_argument(\"no-sandbox\")\n            chrome_options.add_argument(\"allow-file-access-from-files\")\n            chrome_options.add_argument(\"use-fake-device-for-media-stream\")\n            chrome_options.add_argument(\"hide-scrollbars\")\n            # example of adding specific chrome option based on test file name\n            if item.fspath.purebasename == \"workspaces_test\":\n                chrome_options.add_argument(\"use-fake-ui-for-media-stream\")\n            # example of adding specific chrome option based on test name\n            if item.name == \"test_invalid_login\":\n                chrome_options.add_argument(f\"user-agent={Constants.AUTOMATION_USER_AGENT}\")\n            chrome_options.add_argument(\"disable-features=VizDisplayCompositor\")\n            chrome_options.add_argument(\"disable-features=IsolateOrigins,site-per-process\")\n            chrome_options.add_argument(\"disable-popup-blocking\")\n            chrome_options.add_argument(\"disable-dev-shm-usage\")\n            chrome_options.add_argument(\"disable-notifications\")\n        match browser:\n            case \"firefox\":\n                driver = webdriver.Firefox()\n            case \"chrome_headless\":\n                chrome_options.add_argument(\"headless=new\")\n                chrome_options.add_argument(\"force-device-scale-factor=0.6\")\n                chrome_options.add_argument(\"window-size=1920,1080\")\n                driver = webdriver.Chrome(options=chrome_options)\n            # https://stackoverflow.com/questions/76430192/getting-typeerror-webdriver-init-got-an-unexpected-keyword-argument-desi\n            case \"remote\":\n                chrome_options = webdriver.ChromeOptions()\n                chrome_options.browser_version = \"117.0\"\n                chrome_options.set_capability(\n                    \"selenoid:options\",\n                    {\n                        \"enableVNC\": True,\n                        \"enableVideo\": True,\n                        \"videoName\": f\"{item.name}.mp4\",\n                    },\n                )\n                driver = webdriver.Remote(\n                    command_executor=\"http://localhost:4444/wd/hub\", options=chrome_options\n                )\n            case _:\n                if item.config.getoption(\"decorate_driver\"):\n                    driver = EventFiringWebDriver(\n                        webdriver.Chrome(options=chrome_options), DriverEventListener()\n                    )\n                else:\n                    driver = webdriver.Chrome(options=chrome_options)\n        item.cls.driver = driver\n        driver.maximize_window()\n>       driver.get(base_url)\n\ntests/conftest.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:357: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb05df13b00>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 2...\\\\n#21 0x555c9d4e4262 \\\\u003Cunknown>\\\\n#22 0x555c9d4f5f34 \\\\u003Cunknown>\\\\n#23 0x7fc71d694ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.834\nE         (Session info: chrome=121.0.6167.139)\nE       Stacktrace:\nE       #0 0x555c9d4f6d93 <unknown>\nE       #1 0x555c9d1da337 <unknown>\nE       #2 0x555c9d1c1513 <unknown>\nE       #3 0x555c9d1c1557 <unknown>\nE       #4 0x555c9d1bfc1a <unknown>\nE       #5 0x555c9d1c033f <unknown>\nE       #6 0x555c9d1d03b1 <unknown>\nE       #7 0x555c9d1e64d1 <unknown>\nE       #8 0x555c9d1eb01b <unknown>\nE       #9 0x555c9d1c09e9 <unknown>\nE       #10 0x555c9d1e6221 <unknown>\nE       #11 0x555c9d267493 <unknown>\nE       #12 0x555c9d2481e3 <unknown>\nE       #13 0x555c9d218135 <unknown>\nE       #14 0x555c9d21913e <unknown>\nE       #15 0x555c9d4bae4b <unknown>\nE       #16 0x555c9d4bedfa <unknown>\nE       #17 0x555c9d4a76d5 <unknown>\nE       #18 0x555c9d4bfa6f <unknown>\nE       #19 0x555c9d48b69f <unknown>\nE       #20 0x555c9d4e4098 <unknown>\nE       #21 0x555c9d4e4262 <unknown>\nE       #22 0x555c9d4f5f34 <unknown>\nE       #23 0x7fc71d694ac3 <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Basic sanity","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.834\n  (Session info: chrome=121.0.6167.139)\nStacktrace:\n#0 0x555c9d4f6d93 <unknown>\n#1 0x555c9d1da337 <unknown>\n#2 0x555c9d1c1513 <unknown>\n#3 0x555c9d1c1557 <unknown>\n#4 0x555c9d1bfc1a <unknown>\n#5 0x555c9d1c033f <unknown>\n#6 0x555c9d1d03b1 <unknown>\n#7 0x555c9d1e64d1 <unknown>\n#8 0x555c9d1eb01b <unknown>\n#9 0x555c9d1c09e9 <unknown>\n#10 0x555c9d1e6221 <unknown>\n#11 0x555c9d267493 <unknown>\n#12 0x555c9d2481e3 <unknown>\n#13 0x555c9d218135 <unknown>\n#14 0x555c9d21913e <unknown>\n#15 0x555c9d4bae4b <unknown>\n#16 0x555c9d4bedfa <unknown>\n#17 0x555c9d4a76d5 <unknown>\n#18 0x555c9d4bfa6f <unknown>\n#19 0x555c9d48b69f <unknown>\n#20 0x555c9d4e4098 <unknown>\n#21 0x555c9d4e4262 <unknown>\n#22 0x555c9d4f5f34 <unknown>\n#23 0x7fc71d694ac3 <unknown>","statusTrace":"item = <Function test_sanity>\n\n    def pytest_runtest_setup(item: Item) -> None:\n        global browser, driver, chrome_options, wait\n        browser = item.config.getoption(\"browser\")\n        base_url = item.config.getoption(\"base_url\")\n        if browser in (\"chrome\", \"chrome_headless\"):\n            chrome_options = webdriver.ChromeOptions()\n            chrome_options.set_capability(\n                \"goog:loggingPrefs\", {\"performance\": \"ALL\", \"browser\": \"ALL\"}\n            )\n            chrome_options.add_experimental_option(\"excludeSwitches\", [\"enable-automation\"])\n            chrome_options.add_experimental_option(\n                \"prefs\",\n                {\n                    \"profile.default_content_setting_values.notifications\": 2,\n                    \"profile.default_content_setting_values.media_stream_mic\": 1,\n                    \"profile.default_content_setting_values.geolocation\": 1,\n                    \"profile.default_content_setting_values.media_stream_camera\": 1,\n                    \"credentials_enable_service\": False,\n                    \"profile.password_manager_enabled\": False,\n                    \"download.default_directory\": os.path.abspath(\n                        Constants.CHROME_DOWNLOAD_DIRECTORY.absolute().as_posix()\n                    ),\n                },\n            )\n            chrome_options.add_argument(\"disable-dev-shm-usage\")\n            chrome_options.add_argument(\"no-sandbox\")\n            chrome_options.add_argument(\"allow-file-access-from-files\")\n            chrome_options.add_argument(\"use-fake-device-for-media-stream\")\n            chrome_options.add_argument(\"hide-scrollbars\")\n            # example of adding specific chrome option based on test file name\n            if item.fspath.purebasename == \"workspaces_test\":\n                chrome_options.add_argument(\"use-fake-ui-for-media-stream\")\n            # example of adding specific chrome option based on test name\n            if item.name == \"test_invalid_login\":\n                chrome_options.add_argument(f\"user-agent={Constants.AUTOMATION_USER_AGENT}\")\n            chrome_options.add_argument(\"disable-features=VizDisplayCompositor\")\n            chrome_options.add_argument(\"disable-features=IsolateOrigins,site-per-process\")\n            chrome_options.add_argument(\"disable-popup-blocking\")\n            chrome_options.add_argument(\"disable-dev-shm-usage\")\n            chrome_options.add_argument(\"disable-notifications\")\n        match browser:\n            case \"firefox\":\n                driver = webdriver.Firefox()\n            case \"chrome_headless\":\n                chrome_options.add_argument(\"headless=new\")\n                chrome_options.add_argument(\"force-device-scale-factor=0.6\")\n                chrome_options.add_argument(\"window-size=1920,1080\")\n                driver = webdriver.Chrome(options=chrome_options)\n            # https://stackoverflow.com/questions/76430192/getting-typeerror-webdriver-init-got-an-unexpected-keyword-argument-desi\n            case \"remote\":\n                chrome_options = webdriver.ChromeOptions()\n                chrome_options.browser_version = \"117.0\"\n                chrome_options.set_capability(\n                    \"selenoid:options\",\n                    {\n                        \"enableVNC\": True,\n                        \"enableVideo\": True,\n                        \"videoName\": f\"{item.name}.mp4\",\n                    },\n                )\n                driver = webdriver.Remote(\n                    command_executor=\"http://localhost:4444/wd/hub\", options=chrome_options\n                )\n            case _:\n                if item.config.getoption(\"decorate_driver\"):\n                    driver = EventFiringWebDriver(\n                        webdriver.Chrome(options=chrome_options), DriverEventListener()\n                    )\n                else:\n                    driver = webdriver.Chrome(options=chrome_options)\n        item.cls.driver = driver\n        driver.maximize_window()\n>       driver.get(base_url)\n\ntests/conftest.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:357: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:348: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fb05df13b00>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"timeout\",\"message\":\"timeout: Timed out receiving message from renderer: 2...\\\\n#21 0x555c9d4e4262 \\\\u003Cunknown>\\\\n#22 0x555c9d4f5f34 \\\\u003Cunknown>\\\\n#23 0x7fc71d694ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: timeout: Timed out receiving message from renderer: 299.834\nE         (Session info: chrome=121.0.6167.139)\nE       Stacktrace:\nE       #0 0x555c9d4f6d93 <unknown>\nE       #1 0x555c9d1da337 <unknown>\nE       #2 0x555c9d1c1513 <unknown>\nE       #3 0x555c9d1c1557 <unknown>\nE       #4 0x555c9d1bfc1a <unknown>\nE       #5 0x555c9d1c033f <unknown>\nE       #6 0x555c9d1d03b1 <unknown>\nE       #7 0x555c9d1e64d1 <unknown>\nE       #8 0x555c9d1eb01b <unknown>\nE       #9 0x555c9d1c09e9 <unknown>\nE       #10 0x555c9d1e6221 <unknown>\nE       #11 0x555c9d267493 <unknown>\nE       #12 0x555c9d2481e3 <unknown>\nE       #13 0x555c9d218135 <unknown>\nE       #14 0x555c9d21913e <unknown>\nE       #15 0x555c9d4bae4b <unknown>\nE       #16 0x555c9d4bedfa <unknown>\nE       #17 0x555c9d4a76d5 <unknown>\nE       #18 0x555c9d4bfa6f <unknown>\nE       #19 0x555c9d48b69f <unknown>\nE       #20 0x555c9d4e4098 <unknown>\nE       #21 0x555c9d4e4262 <unknown>\nE       #22 0x555c9d4f5f34 <unknown>\nE       #23 0x7fc71d694ac3 <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:229: TimeoutException","steps":[],"attachments":[{"uid":"db5120134cae7943","name":"public ip address","source":"db5120134cae7943.txt","type":"text/plain","size":13},{"uid":"cc5508c722035bed","name":"Cookies","source":"cc5508c722035bed.json","type":"application/json","size":3873},{"uid":"7e2692e69770c50","name":"Session Storage","source":"7e2692e69770c50.json","type":"application/json","size":359},{"uid":"cff48840940e1370","name":"Local Storage","source":"cff48840940e1370.json","type":"application/json","size":208},{"uid":"ba77a93fc6aaf0c","name":"Console Logs","source":"ba77a93fc6aaf0c.json","type":"application/json","size":1521},{"uid":"8d179911b9010475","name":"Full Page Screenshot","source":"8d179911b9010475.png","type":"image/png","size":5075525},{"uid":"dbe9f36d38740ec1","name":"URL","source":"dbe9f36d38740ec1.uri","type":"text/uri-list","size":23},{"uid":"11f45f514e0d47df","name":"Network Logs","source":"11f45f514e0d47df.json","type":"application/json","size":23092}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":8,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"epic","value":"Security"},{"name":"severity","value":"blocker"},{"name":"feature","value":"Login"},{"name":"tag","value":"devRun"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"login_test"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az1016-557"},{"name":"thread","value":"3934-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.login_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security","devRun"]},"source":"80cc64b14ca17b2f.json","parameterValues":[]}