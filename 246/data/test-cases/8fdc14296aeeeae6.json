{"uid":"8fdc14296aeeeae6","name":"Logout of system test","fullName":"tests.login_test.TestLogin#test_logout","historyId":"4097bd73ddf8abfda18e8dd494ce87f0","time":{"start":1712365920075,"stop":1712365930290,"duration":10215},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55d5074df8a3 <unknown>\n#1 0x55d5071d58c6 <unknown>\n#2 0x55d507220618 <unknown>\n#3 0x55d5072206d1 <unknown>\n#4 0x55d507263744 <unknown>\n#5 0x55d5072425cd <unknown>\n#6 0x55d507260c19 <unknown>\n#7 0x55d507242343 <unknown>\n#8 0x55d507213593 <unknown>\n#9 0x55d507213f5e <unknown>\n#10 0x55d5074a388b <unknown>\n#11 0x55d5074a77e5 <unknown>\n#12 0x55d5074915b1 <unknown>\n#13 0x55d5074a8372 <unknown>\n#14 0x55d5074768bf <unknown>\n#15 0x55d5074ce768 <unknown>\n#16 0x55d5074ce93b <unknown>\n#17 0x55d5074de9f4 <unknown>\n#18 0x7f143bc94ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f925f33ccb0>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a7e583fbca6ace492c3f7129d1331c60\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f925e966480>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55d5074df8a3 <unknown>\nE       #1 0x55d5071d58c6 <unknown>\nE       #2 0x55d507220618 <unknown>\nE       #3 0x55d5072206d1 <unknown>\nE       #4 0x55d507263744 <unknown>\nE       #5 0x55d5072425cd <unknown>\nE       #6 0x55d507260c19 <unknown>\nE       #7 0x55d507242343 <unknown>\nE       #8 0x55d507213593 <unknown>\nE       #9 0x55d507213f5e <unknown>\nE       #10 0x55d5074a388b <unknown>\nE       #11 0x55d5074a77e5 <unknown>\nE       #12 0x55d5074915b1 <unknown>\nE       #13 0x55d5074a8372 <unknown>\nE       #14 0x55d5074768bf <unknown>\nE       #15 0x55d5074ce768 <unknown>\nE       #16 0x55d5074ce93b <unknown>\nE       #17 0x55d5074de9f4 <unknown>\nE       #18 0x7f143bc94ac3 <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"data","time":{"start":1712365672977,"stop":1712365672978,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1712365672977,"stop":1712365672977,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"session_request","time":{"start":1712365672977,"stop":1712365672977,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1712365672977,"stop":1712365672977,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55d5074df8a3 <unknown>\n#1 0x55d5071d58c6 <unknown>\n#2 0x55d507220618 <unknown>\n#3 0x55d5072206d1 <unknown>\n#4 0x55d507263744 <unknown>\n#5 0x55d5072425cd <unknown>\n#6 0x55d507260c19 <unknown>\n#7 0x55d507242343 <unknown>\n#8 0x55d507213593 <unknown>\n#9 0x55d507213f5e <unknown>\n#10 0x55d5074a388b <unknown>\n#11 0x55d5074a77e5 <unknown>\n#12 0x55d5074915b1 <unknown>\n#13 0x55d5074a8372 <unknown>\n#14 0x55d5074768bf <unknown>\n#15 0x55d5074ce768 <unknown>\n#16 0x55d5074ce93b <unknown>\n#17 0x55d5074de9f4 <unknown>\n#18 0x7f143bc94ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f925f33ccb0>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"a7e583fbca6ace492c3f7129d1331c60\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f925e966480>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55d5074df8a3 <unknown>\nE       #1 0x55d5071d58c6 <unknown>\nE       #2 0x55d507220618 <unknown>\nE       #3 0x55d5072206d1 <unknown>\nE       #4 0x55d507263744 <unknown>\nE       #5 0x55d5072425cd <unknown>\nE       #6 0x55d507260c19 <unknown>\nE       #7 0x55d507242343 <unknown>\nE       #8 0x55d507213593 <unknown>\nE       #9 0x55d507213f5e <unknown>\nE       #10 0x55d5074a388b <unknown>\nE       #11 0x55d5074a77e5 <unknown>\nE       #12 0x55d5074915b1 <unknown>\nE       #13 0x55d5074a8372 <unknown>\nE       #14 0x55d5074768bf <unknown>\nE       #15 0x55d5074ce768 <unknown>\nE       #16 0x55d5074ce93b <unknown>\nE       #17 0x55d5074de9f4 <unknown>\nE       #18 0x7f143bc94ac3 <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1712365920076,"stop":1712365930289,"duration":10213},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55d5074df8a3 <unknown>\n#1 0x55d5071d58c6 <unknown>\n#2 0x55d507220618 <unknown>\n#3 0x55d5072206d1 <unknown>\n#4 0x55d507263744 <unknown>\n#5 0x55d5072425cd <unknown>\n#6 0x55d507260c19 <unknown>\n#7 0x55d507242343 <unknown>\n#8 0x55d507213593 <unknown>\n#9 0x55d507213f5e <unknown>\n#10 0x55d5074a388b <unknown>\n#11 0x55d5074a77e5 <unknown>\n#12 0x55d5074915b1 <unknown>\n#13 0x55d5074a8372 <unknown>\n#14 0x55d5074768bf <unknown>\n#15 0x55d5074ce768 <unknown>\n#16 0x55d5074ce93b <unknown>\n#17 0x55d5074de9f4 <unknown>\n#18 0x7f143bc94ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 20, in click_login_link\n    self.click(self.LOGIN_LINK)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 60, in click\n    el: WebElement = self.wait.until(\n                     ^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"public ip address","time":{"start":1712365930305,"stop":1712365930339,"duration":34},"status":"passed","steps":[],"attachments":[{"uid":"edbf65cb5c63e23c","name":"HTTP logs of http://checkip.amazonaws.com/","source":"edbf65cb5c63e23c.txt","type":"text/plain","size":262}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"5329ea2d03346603","name":"HTML Attachment Example","source":"5329ea2d03346603.html","type":"text/html","size":32},{"uid":"415c0b39ad616a","name":"File Attachment Example","source":"415c0b39ad616a.png","type":"image/png","size":14730},{"uid":"d31b3a10766b1fee","name":"Text Attachment Example","source":"d31b3a10766b1fee.txt","type":"text/plain","size":17},{"uid":"dad58a16f1b64d6f","name":"CSV Attachment Example","source":"dad58a16f1b64d6f.csv","type":"text/csv","size":32},{"uid":"4ab4c2538699c5a2","name":"JSON Attachment Example","source":"4ab4c2538699c5a2.json","type":"application/json","size":31},{"uid":"8e03bed62536eca6","name":"XML Attachment Example","source":"8e03bed62536eca6.xml","type":"application/xml","size":140},{"uid":"468655d3d1ae80fd","name":"URI List Attachment Example","source":"468655d3d1ae80fd.uri","type":"text/uri-list","size":70},{"uid":"8ff0c07bcd2f55bf","name":"Cookies","source":"8ff0c07bcd2f55bf.json","type":"application/json","size":3096},{"uid":"b66dcf38254ecc81","name":"Session Storage","source":"b66dcf38254ecc81.json","type":"application/json","size":359},{"uid":"d60c9c8152d8d075","name":"Local Storage","source":"d60c9c8152d8d075.json","type":"application/json","size":208},{"uid":"f7235e74819e809b","name":"Console Logs","source":"f7235e74819e809b.json","type":"application/json","size":653},{"uid":"2e37468cbd4c7f66","name":"Full Page Screenshot","source":"2e37468cbd4c7f66.png","type":"image/png","size":6239653},{"uid":"71cf9701a8d28fe2","name":"URL","source":"71cf9701a8d28fe2.uri","type":"text/uri-list","size":23},{"uid":"7fa4b07588a9471e","name":"Network Logs","source":"7fa4b07588a9471e.json","type":"application/json","size":23258}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":15,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"session_request::0","time":{"start":1712365934599,"stop":1712365934599,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Login"},{"name":"severity","value":"blocker"},{"name":"epic","value":"Security"},{"name":"story","value":"As a user I want to be able to logout after a successful login."},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"login_test"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az659-545"},{"name":"thread","value":"2443-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.login_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"******"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security"]},"source":"8fdc14296aeeeae6.json","parameterValues":["******"]}