{"uid":"89a4540a22d21105","name":"Logout of system test","fullName":"tests.login_test.TestLogin#test_logout","historyId":"a207e82152ac39860308af9d2023a152","time":{"start":1746410089766,"stop":1746410100270,"duration":10504},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x562695fd653a <unknown>\n#1 0x562695ad1f00 <unknown>\n#2 0x562695b21c0c <unknown>\n#3 0x562695b21e31 <unknown>\n#4 0x562695b67bd4 <unknown>\n#5 0x562695b465cd <unknown>\n#6 0x562695b64f84 <unknown>\n#7 0x562695b46343 <unknown>\n#8 0x562695b1378a <unknown>\n#9 0x562695b149de <unknown>\n#10 0x562695fa02cb <unknown>\n#11 0x562695fa4242 <unknown>\n#12 0x562695f8d7ac <unknown>\n#13 0x562695fa4df7 <unknown>\n#14 0x562695f71b2f <unknown>\n#15 0x562695fc51a8 <unknown>\n#16 0x562695fc5370 <unknown>\n#17 0x562695fd53b6 <unknown>\n#18 0x7f88f149caa4 <unknown>\n#19 0x7f88f1529c3c <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f4509305a30>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\"password\", \"qwerty\", mode=allure.parameter_mode.MASKED)\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:18: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:59: in click\n    el: WebElement = self.wait.until(expected_conditions.element_to_be_clickable(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"cb0a09244c4a1d458a3350808ab41993\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f45093c4180>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x562695fd653a <unknown>\nE       #1 0x562695ad1f00 <unknown>\nE       #2 0x562695b21c0c <unknown>\nE       #3 0x562695b21e31 <unknown>\nE       #4 0x562695b67bd4 <unknown>\nE       #5 0x562695b465cd <unknown>\nE       #6 0x562695b64f84 <unknown>\nE       #7 0x562695b46343 <unknown>\nE       #8 0x562695b1378a <unknown>\nE       #9 0x562695b149de <unknown>\nE       #10 0x562695fa02cb <unknown>\nE       #11 0x562695fa4242 <unknown>\nE       #12 0x562695f8d7ac <unknown>\nE       #13 0x562695fa4df7 <unknown>\nE       #14 0x562695f71b2f <unknown>\nE       #15 0x562695fc51a8 <unknown>\nE       #16 0x562695fc5370 <unknown>\nE       #17 0x562695fd53b6 <unknown>\nE       #18 0x7f88f149caa4 <unknown>\nE       #19 0x7f88f1529c3c <unknown>\n\n.venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1746410032028,"stop":1746410032028,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"session_request","time":{"start":1746410032028,"stop":1746410032028,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746410032028,"stop":1746410032028,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"data","time":{"start":1746410032029,"stop":1746410032029,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x562695fd653a <unknown>\n#1 0x562695ad1f00 <unknown>\n#2 0x562695b21c0c <unknown>\n#3 0x562695b21e31 <unknown>\n#4 0x562695b67bd4 <unknown>\n#5 0x562695b465cd <unknown>\n#6 0x562695b64f84 <unknown>\n#7 0x562695b46343 <unknown>\n#8 0x562695b1378a <unknown>\n#9 0x562695b149de <unknown>\n#10 0x562695fa02cb <unknown>\n#11 0x562695fa4242 <unknown>\n#12 0x562695f8d7ac <unknown>\n#13 0x562695fa4df7 <unknown>\n#14 0x562695f71b2f <unknown>\n#15 0x562695fc51a8 <unknown>\n#16 0x562695fc5370 <unknown>\n#17 0x562695fd53b6 <unknown>\n#18 0x7f88f149caa4 <unknown>\n#19 0x7f88f1529c3c <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f4509305a30>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\"password\", \"qwerty\", mode=allure.parameter_mode.MASKED)\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:18: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:59: in click\n    el: WebElement = self.wait.until(expected_conditions.element_to_be_clickable(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"cb0a09244c4a1d458a3350808ab41993\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f45093c4180>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x562695fd653a <unknown>\nE       #1 0x562695ad1f00 <unknown>\nE       #2 0x562695b21c0c <unknown>\nE       #3 0x562695b21e31 <unknown>\nE       #4 0x562695b67bd4 <unknown>\nE       #5 0x562695b465cd <unknown>\nE       #6 0x562695b64f84 <unknown>\nE       #7 0x562695b46343 <unknown>\nE       #8 0x562695b1378a <unknown>\nE       #9 0x562695b149de <unknown>\nE       #10 0x562695fa02cb <unknown>\nE       #11 0x562695fa4242 <unknown>\nE       #12 0x562695f8d7ac <unknown>\nE       #13 0x562695fa4df7 <unknown>\nE       #14 0x562695f71b2f <unknown>\nE       #15 0x562695fc51a8 <unknown>\nE       #16 0x562695fc5370 <unknown>\nE       #17 0x562695fd53b6 <unknown>\nE       #18 0x7f88f149caa4 <unknown>\nE       #19 0x7f88f1529c3c <unknown>\n\n.venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1746410089768,"stop":1746410100269,"duration":10501},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x562695fd653a <unknown>\n#1 0x562695ad1f00 <unknown>\n#2 0x562695b21c0c <unknown>\n#3 0x562695b21e31 <unknown>\n#4 0x562695b67bd4 <unknown>\n#5 0x562695b465cd <unknown>\n#6 0x562695b64f84 <unknown>\n#7 0x562695b46343 <unknown>\n#8 0x562695b1378a <unknown>\n#9 0x562695b149de <unknown>\n#10 0x562695fa02cb <unknown>\n#11 0x562695fa4242 <unknown>\n#12 0x562695f8d7ac <unknown>\n#13 0x562695fa4df7 <unknown>\n#14 0x562695f71b2f <unknown>\n#15 0x562695fc51a8 <unknown>\n#16 0x562695fc5370 <unknown>\n#17 0x562695fd53b6 <unknown>\n#18 0x7f88f149caa4 <unknown>\n#19 0x7f88f1529c3c <unknown>\n\n","statusTrace":"  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 18, in click_login_link\n    self.click(self.LOGIN_LINK)\n    ~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 59, in click\n    el: WebElement = self.wait.until(expected_conditions.element_to_be_clickable(locator))\n                     ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py\", line 146, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"public ip address","time":{"start":1746410100279,"stop":1746410100289,"duration":10},"status":"passed","steps":[],"attachments":[{"uid":"ab46df353caee510","name":"HTTP logs of http://checkip.amazonaws.com/","source":"ab46df353caee510.txt","type":"text/plain","size":357}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"71d00a9cb4a3abd7","name":"HTML Attachment Example","source":"71d00a9cb4a3abd7.html","type":"text/html","size":32},{"uid":"a08c1591052aa58b","name":"File Attachment Example","source":"a08c1591052aa58b.png","type":"image/png","size":14730},{"uid":"395ff17f7bffe797","name":"Text Attachment Example","source":"395ff17f7bffe797.txt","type":"text/plain","size":17},{"uid":"e85aadcce792de62","name":"CSV Attachment Example","source":"e85aadcce792de62.csv","type":"text/csv","size":32},{"uid":"62329e6114abe66c","name":"JSON Attachment Example","source":"62329e6114abe66c.json","type":"application/json","size":31},{"uid":"fb3378df03b1cc9b","name":"XML Attachment Example","source":"fb3378df03b1cc9b.xml","type":"application/xml","size":140},{"uid":"3623d3df8eed2662","name":"URI List Attachment Example","source":"3623d3df8eed2662.uri","type":"text/uri-list","size":70},{"uid":"ca9b98fd8e8d32d8","name":"Cookies","source":"ca9b98fd8e8d32d8.json","type":"application/json","size":4116},{"uid":"345a0701673839c","name":"Session Storage","source":"345a0701673839c.json","type":"application/json","size":359},{"uid":"f6a68cd882baf187","name":"Local Storage","source":"f6a68cd882baf187.json","type":"application/json","size":548},{"uid":"536ede5f0bd1bb85","name":"Full Page Screenshot","source":"536ede5f0bd1bb85.png","type":"image/png","size":1358667},{"uid":"ae7641862a9965a0","name":"URL","source":"ae7641862a9965a0.uri","type":"text/uri-list","size":23},{"uid":"8ae2cd137ccf2369","name":"Network Logs","source":"8ae2cd137ccf2369.json","type":"application/json","size":59419}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":14,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"session_request::0","time":{"start":1746410101777,"stop":1746410101777,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Security"},{"name":"feature","value":"Login"},{"name":"severity","value":"blocker"},{"name":"story","value":"As a user I want to be able to logout after a successful login."},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"login_test"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az2209-645"},{"name":"thread","value":"1973-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.login_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"******"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security"]},"source":"89a4540a22d21105.json","parameterValues":["******"]}