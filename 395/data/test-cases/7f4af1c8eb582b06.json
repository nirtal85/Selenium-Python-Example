{"uid":"7f4af1c8eb582b06","name":"Logout of system test","fullName":"tests.login_test.TestLogin#test_logout","historyId":"bcd270631af97f0f80451c684cc4f3bb","time":{"start":1725240413896,"stop":1725240424250,"duration":10354},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55f6f5a6281a <unknown>\n#1 0x55f6f5730e50 <unknown>\n#2 0x55f6f5780644 <unknown>\n#3 0x55f6f5780931 <unknown>\n#4 0x55f6f57c6534 <unknown>\n#5 0x55f6f57a54bd <unknown>\n#6 0x55f6f57c39c6 <unknown>\n#7 0x55f6f57a5233 <unknown>\n#8 0x55f6f5773093 <unknown>\n#9 0x55f6f577409e <unknown>\n#10 0x55f6f5a29a7b <unknown>\n#11 0x55f6f5a2da31 <unknown>\n#12 0x55f6f5a15645 <unknown>\n#13 0x55f6f5a2e5a2 <unknown>\n#14 0x55f6f59fa81f <unknown>\n#15 0x55f6f5a51618 <unknown>\n#16 0x55f6f5a517e2 <unknown>\n#17 0x55f6f5a6160c <unknown>\n#18 0x7f3d26094ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7fba1264bec0>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c8d9959b0dfb264f2615bde5b5e9f71d\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7fba121d5800>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55f6f5a6281a <unknown>\nE       #1 0x55f6f5730e50 <unknown>\nE       #2 0x55f6f5780644 <unknown>\nE       #3 0x55f6f5780931 <unknown>\nE       #4 0x55f6f57c6534 <unknown>\nE       #5 0x55f6f57a54bd <unknown>\nE       #6 0x55f6f57c39c6 <unknown>\nE       #7 0x55f6f57a5233 <unknown>\nE       #8 0x55f6f5773093 <unknown>\nE       #9 0x55f6f577409e <unknown>\nE       #10 0x55f6f5a29a7b <unknown>\nE       #11 0x55f6f5a2da31 <unknown>\nE       #12 0x55f6f5a15645 <unknown>\nE       #13 0x55f6f5a2e5a2 <unknown>\nE       #14 0x55f6f59fa81f <unknown>\nE       #15 0x55f6f5a51618 <unknown>\nE       #16 0x55f6f5a517e2 <unknown>\nE       #17 0x55f6f5a6160c <unknown>\nE       #18 0x7f3d26094ac3 <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55f6f5a6281a <unknown>\n#1 0x55f6f5730e50 <unknown>\n#2 0x55f6f5780644 <unknown>\n#3 0x55f6f5780931 <unknown>\n#4 0x55f6f57c6534 <unknown>\n#5 0x55f6f57a54bd <unknown>\n#6 0x55f6f57c39c6 <unknown>\n#7 0x55f6f57a5233 <unknown>\n#8 0x55f6f5773093 <unknown>\n#9 0x55f6f577409e <unknown>\n#10 0x55f6f5a29a7b <unknown>\n#11 0x55f6f5a2da31 <unknown>\n#12 0x55f6f5a15645 <unknown>\n#13 0x55f6f5a2e5a2 <unknown>\n#14 0x55f6f59fa81f <unknown>\n#15 0x55f6f5a51618 <unknown>\n#16 0x55f6f5a517e2 <unknown>\n#17 0x55f6f5a6160c <unknown>\n#18 0x7f3d26094ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7fba1264bec0>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c8d9959b0dfb264f2615bde5b5e9f71d\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7fba121d5800>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55f6f5a6281a <unknown>\nE       #1 0x55f6f5730e50 <unknown>\nE       #2 0x55f6f5780644 <unknown>\nE       #3 0x55f6f5780931 <unknown>\nE       #4 0x55f6f57c6534 <unknown>\nE       #5 0x55f6f57a54bd <unknown>\nE       #6 0x55f6f57c39c6 <unknown>\nE       #7 0x55f6f57a5233 <unknown>\nE       #8 0x55f6f5773093 <unknown>\nE       #9 0x55f6f577409e <unknown>\nE       #10 0x55f6f5a29a7b <unknown>\nE       #11 0x55f6f5a2da31 <unknown>\nE       #12 0x55f6f5a15645 <unknown>\nE       #13 0x55f6f5a2e5a2 <unknown>\nE       #14 0x55f6f59fa81f <unknown>\nE       #15 0x55f6f5a51618 <unknown>\nE       #16 0x55f6f5a517e2 <unknown>\nE       #17 0x55f6f5a6160c <unknown>\nE       #18 0x7f3d26094ac3 <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1725240413897,"stop":1725240424249,"duration":10352},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55f6f5a6281a <unknown>\n#1 0x55f6f5730e50 <unknown>\n#2 0x55f6f5780644 <unknown>\n#3 0x55f6f5780931 <unknown>\n#4 0x55f6f57c6534 <unknown>\n#5 0x55f6f57a54bd <unknown>\n#6 0x55f6f57c39c6 <unknown>\n#7 0x55f6f57a5233 <unknown>\n#8 0x55f6f5773093 <unknown>\n#9 0x55f6f577409e <unknown>\n#10 0x55f6f5a29a7b <unknown>\n#11 0x55f6f5a2da31 <unknown>\n#12 0x55f6f5a15645 <unknown>\n#13 0x55f6f5a2e5a2 <unknown>\n#14 0x55f6f59fa81f <unknown>\n#15 0x55f6f5a51618 <unknown>\n#16 0x55f6f5a517e2 <unknown>\n#17 0x55f6f5a6160c <unknown>\n#18 0x7f3d26094ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 20, in click_login_link\n    self.click(self.LOGIN_LINK)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 60, in click\n    el: WebElement = self.wait.until(\n                     ^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"public ip address","time":{"start":1725240424260,"stop":1725240424350,"duration":90},"status":"passed","steps":[],"attachments":[{"uid":"1d2a7850d569c520","name":"HTTP logs of http://checkip.amazonaws.com/","source":"1d2a7850d569c520.txt","type":"text/plain","size":356}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"5d30633046f00c7b","name":"HTML Attachment Example","source":"5d30633046f00c7b.html","type":"text/html","size":32},{"uid":"5561e1ceb111fd21","name":"File Attachment Example","source":"5561e1ceb111fd21.png","type":"image/png","size":14730},{"uid":"ec35268dc80953b","name":"Text Attachment Example","source":"ec35268dc80953b.txt","type":"text/plain","size":17},{"uid":"1a00e5a9bda1c133","name":"CSV Attachment Example","source":"1a00e5a9bda1c133.csv","type":"text/csv","size":32},{"uid":"d666e11213e513a2","name":"JSON Attachment Example","source":"d666e11213e513a2.json","type":"application/json","size":31},{"uid":"e893d62d7113f445","name":"XML Attachment Example","source":"e893d62d7113f445.xml","type":"application/xml","size":140},{"uid":"22846dc7dffab817","name":"URI List Attachment Example","source":"22846dc7dffab817.uri","type":"text/uri-list","size":70},{"uid":"a70b26f359fcf1fd","name":"Cookies","source":"a70b26f359fcf1fd.json","type":"application/json","size":3584},{"uid":"5a9738113c397b28","name":"Session Storage","source":"5a9738113c397b28.json","type":"application/json","size":359},{"uid":"be0e0cdad6b48c1d","name":"Local Storage","source":"be0e0cdad6b48c1d.json","type":"application/json","size":350},{"uid":"fb998dd4733d1a9c","name":"Console Logs","source":"fb998dd4733d1a9c.json","type":"application/json","size":236},{"uid":"997cad2319ec727e","name":"Full Page Screenshot","source":"997cad2319ec727e.png","type":"image/png","size":4647485},{"uid":"4be863a25701b9a3","name":"URL","source":"4be863a25701b9a3.uri","type":"text/uri-list","size":23},{"uid":"1779c7e5ae32d021","name":"Network Logs","source":"1779c7e5ae32d021.json","type":"application/json","size":66248}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":15,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"story","value":"As a user I want to be able to logout after a successful login."},{"name":"severity","value":"blocker"},{"name":"feature","value":"Login"},{"name":"epic","value":"Security"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"login_test"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az775-864"},{"name":"thread","value":"2010-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.login_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"******"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security"]},"source":"7f4af1c8eb582b06.json","parameterValues":["******"]}