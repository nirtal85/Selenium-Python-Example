{"uid":"f15351ccfcb867ee","name":"Logout of system test","fullName":"tests.login_test.TestLogin#test_logout","historyId":"10a98445ffdbb479d10ca796a7931682","time":{"start":1744681786250,"stop":1744681796303,"duration":10053},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55f205b8153a <unknown>\n#1 0x55f20567cf00 <unknown>\n#2 0x55f2056ccc0c <unknown>\n#3 0x55f2056cce31 <unknown>\n#4 0x55f205712bd4 <unknown>\n#5 0x55f2056f15cd <unknown>\n#6 0x55f20570ff84 <unknown>\n#7 0x55f2056f1343 <unknown>\n#8 0x55f2056be78a <unknown>\n#9 0x55f2056bf9de <unknown>\n#10 0x55f205b4b2cb <unknown>\n#11 0x55f205b4f242 <unknown>\n#12 0x55f205b387ac <unknown>\n#13 0x55f205b4fdf7 <unknown>\n#14 0x55f205b1cb2f <unknown>\n#15 0x55f205b701a8 <unknown>\n#16 0x55f205b70370 <unknown>\n#17 0x55f205b803b6 <unknown>\n#18 0x7f37ba29caa4 <unknown>\n#19 0x7f37ba329c3c <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f49d600dd90>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\"password\", \"qwerty\", mode=allure.parameter_mode.MASKED)\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:18: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:59: in click\n    el: WebElement = self.wait.until(expected_conditions.element_to_be_clickable(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"d5381def477714502449fb5708d79db3\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f49d60071a0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55f205b8153a <unknown>\nE       #1 0x55f20567cf00 <unknown>\nE       #2 0x55f2056ccc0c <unknown>\nE       #3 0x55f2056cce31 <unknown>\nE       #4 0x55f205712bd4 <unknown>\nE       #5 0x55f2056f15cd <unknown>\nE       #6 0x55f20570ff84 <unknown>\nE       #7 0x55f2056f1343 <unknown>\nE       #8 0x55f2056be78a <unknown>\nE       #9 0x55f2056bf9de <unknown>\nE       #10 0x55f205b4b2cb <unknown>\nE       #11 0x55f205b4f242 <unknown>\nE       #12 0x55f205b387ac <unknown>\nE       #13 0x55f205b4fdf7 <unknown>\nE       #14 0x55f205b1cb2f <unknown>\nE       #15 0x55f205b701a8 <unknown>\nE       #16 0x55f205b70370 <unknown>\nE       #17 0x55f205b803b6 <unknown>\nE       #18 0x7f37ba29caa4 <unknown>\nE       #19 0x7f37ba329c3c <unknown>\n\n.venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1744681728443,"stop":1744681728443,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1744681728443,"stop":1744681728444,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"session_request","time":{"start":1744681728444,"stop":1744681728444,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"data","time":{"start":1744681728444,"stop":1744681728444,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55f205b8153a <unknown>\n#1 0x55f20567cf00 <unknown>\n#2 0x55f2056ccc0c <unknown>\n#3 0x55f2056cce31 <unknown>\n#4 0x55f205712bd4 <unknown>\n#5 0x55f2056f15cd <unknown>\n#6 0x55f20570ff84 <unknown>\n#7 0x55f2056f1343 <unknown>\n#8 0x55f2056be78a <unknown>\n#9 0x55f2056bf9de <unknown>\n#10 0x55f205b4b2cb <unknown>\n#11 0x55f205b4f242 <unknown>\n#12 0x55f205b387ac <unknown>\n#13 0x55f205b4fdf7 <unknown>\n#14 0x55f205b1cb2f <unknown>\n#15 0x55f205b701a8 <unknown>\n#16 0x55f205b70370 <unknown>\n#17 0x55f205b803b6 <unknown>\n#18 0x7f37ba29caa4 <unknown>\n#19 0x7f37ba329c3c <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f49d600dd90>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\"password\", \"qwerty\", mode=allure.parameter_mode.MASKED)\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:18: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:59: in click\n    el: WebElement = self.wait.until(expected_conditions.element_to_be_clickable(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"d5381def477714502449fb5708d79db3\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f49d60071a0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55f205b8153a <unknown>\nE       #1 0x55f20567cf00 <unknown>\nE       #2 0x55f2056ccc0c <unknown>\nE       #3 0x55f2056cce31 <unknown>\nE       #4 0x55f205712bd4 <unknown>\nE       #5 0x55f2056f15cd <unknown>\nE       #6 0x55f20570ff84 <unknown>\nE       #7 0x55f2056f1343 <unknown>\nE       #8 0x55f2056be78a <unknown>\nE       #9 0x55f2056bf9de <unknown>\nE       #10 0x55f205b4b2cb <unknown>\nE       #11 0x55f205b4f242 <unknown>\nE       #12 0x55f205b387ac <unknown>\nE       #13 0x55f205b4fdf7 <unknown>\nE       #14 0x55f205b1cb2f <unknown>\nE       #15 0x55f205b701a8 <unknown>\nE       #16 0x55f205b70370 <unknown>\nE       #17 0x55f205b803b6 <unknown>\nE       #18 0x7f37ba29caa4 <unknown>\nE       #19 0x7f37ba329c3c <unknown>\n\n.venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1744681786252,"stop":1744681796302,"duration":10050},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55f205b8153a <unknown>\n#1 0x55f20567cf00 <unknown>\n#2 0x55f2056ccc0c <unknown>\n#3 0x55f2056cce31 <unknown>\n#4 0x55f205712bd4 <unknown>\n#5 0x55f2056f15cd <unknown>\n#6 0x55f20570ff84 <unknown>\n#7 0x55f2056f1343 <unknown>\n#8 0x55f2056be78a <unknown>\n#9 0x55f2056bf9de <unknown>\n#10 0x55f205b4b2cb <unknown>\n#11 0x55f205b4f242 <unknown>\n#12 0x55f205b387ac <unknown>\n#13 0x55f205b4fdf7 <unknown>\n#14 0x55f205b1cb2f <unknown>\n#15 0x55f205b701a8 <unknown>\n#16 0x55f205b70370 <unknown>\n#17 0x55f205b803b6 <unknown>\n#18 0x7f37ba29caa4 <unknown>\n#19 0x7f37ba329c3c <unknown>\n\n","statusTrace":"  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 18, in click_login_link\n    self.click(self.LOGIN_LINK)\n    ~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 59, in click\n    el: WebElement = self.wait.until(expected_conditions.element_to_be_clickable(locator))\n                     ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py\", line 146, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"public ip address","time":{"start":1744681796312,"stop":1744681796350,"duration":38},"status":"passed","steps":[],"attachments":[{"uid":"65ae4dbc2c2c5929","name":"HTTP logs of http://checkip.amazonaws.com/","source":"65ae4dbc2c2c5929.txt","type":"text/plain","size":357}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"9b2b7edb74562299","name":"HTML Attachment Example","source":"9b2b7edb74562299.html","type":"text/html","size":32},{"uid":"c1daf77afddbfbad","name":"File Attachment Example","source":"c1daf77afddbfbad.png","type":"image/png","size":14730},{"uid":"ab04fa829da11357","name":"Text Attachment Example","source":"ab04fa829da11357.txt","type":"text/plain","size":17},{"uid":"8b234edac8808a42","name":"CSV Attachment Example","source":"8b234edac8808a42.csv","type":"text/csv","size":32},{"uid":"a3c2e36588b9d9c3","name":"JSON Attachment Example","source":"a3c2e36588b9d9c3.json","type":"application/json","size":31},{"uid":"93124feead4fa288","name":"XML Attachment Example","source":"93124feead4fa288.xml","type":"application/xml","size":140},{"uid":"96fb1b42cebf8957","name":"URI List Attachment Example","source":"96fb1b42cebf8957.uri","type":"text/uri-list","size":70},{"uid":"bbb97868244838f7","name":"Cookies","source":"bbb97868244838f7.json","type":"application/json","size":4171},{"uid":"7c25b1d50bec5202","name":"Session Storage","source":"7c25b1d50bec5202.json","type":"application/json","size":359},{"uid":"341fd8060d713948","name":"Local Storage","source":"341fd8060d713948.json","type":"application/json","size":500},{"uid":"97e8a1a6d4efa4fd","name":"Full Page Screenshot","source":"97e8a1a6d4efa4fd.png","type":"image/png","size":1358374},{"uid":"92c02659b04a81bd","name":"URL","source":"92c02659b04a81bd.uri","type":"text/uri-list","size":23},{"uid":"ad9fb8c2627d26b2","name":"Network Logs","source":"ad9fb8c2627d26b2.json","type":"application/json","size":59531}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":14,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"session_request::0","time":{"start":1744681797865,"stop":1744681797865,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"blocker"},{"name":"feature","value":"Login"},{"name":"epic","value":"Security"},{"name":"story","value":"As a user I want to be able to logout after a successful login."},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"login_test"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az1910-428"},{"name":"thread","value":"1981-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.login_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"******"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security"]},"source":"f15351ccfcb867ee.json","parameterValues":["******"]}