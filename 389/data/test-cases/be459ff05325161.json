{"uid":"be459ff05325161","name":"Logout of system test","fullName":"tests.test_login.TestLogin#test_logout","historyId":"22bac01b3c7491378deafbf6e6797ba7","time":{"start":1682801189346,"stop":1682801199577,"duration":10231},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x558a4204afe3 <unknown>\n#1 0x558a41d89d36 <unknown>\n#2 0x558a41dc6c4d <unknown>\n#3 0x558a41dc6d61 <unknown>\n#4 0x558a41e026a4 <unknown>\n#5 0x558a41de78ed <unknown>\n#6 0x558a41e00232 <unknown>\n#7 0x558a41de7693 <unknown>\n#8 0x558a41dba03a <unknown>\n#9 0x558a41dbb17e <unknown>\n#10 0x558a4200cdbd <unknown>\n#11 0x558a42010c6c <unknown>\n#12 0x558a4201a4b0 <unknown>\n#13 0x558a42011d63 <unknown>\n#14 0x558a41fe4c35 <unknown>\n#15 0x558a42035138 <unknown>\n#16 0x558a420352c7 <unknown>\n#17 0x558a42043093 <unknown>\n#18 0x7f062066cb43 <unknown>","statusTrace":"self = <tests.test_login.TestLogin object at 0x7f1a309880a0>\njson_reader = <utils.json_parser.JsonParser object at 0x7f1a309f3010>\nrequest = <FixtureRequest for <Function test_logout>>\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user i want to be able to logout after a successful login.\")\n    @pytest.mark.run(order=2)\n    def test_logout(self, json_reader, request: FixtureRequest):\n        username = request.config.getini(\"username\")\n        password = request.config.getini(\"password\")\n        # example of a simple text attachment\n        allure.attach(body=username, name=\"username\", attachment_type=allure.attachment_type.TEXT)\n>       self.about_page.click_login_link()\n\ntests/test_login.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:19: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:21: in click\n    el: WebElement = self._wait.until(expected_conditions.element_to_be_clickable(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"d6ad48ed5a53c7d006bee454111085be\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f1a30803eb0>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x558a4204afe3 <unknown>\nE       #1 0x558a41d89d36 <unknown>\nE       #2 0x558a41dc6c4d <unknown>\nE       #3 0x558a41dc6d61 <unknown>\nE       #4 0x558a41e026a4 <unknown>\nE       #5 0x558a41de78ed <unknown>\nE       #6 0x558a41e00232 <unknown>\nE       #7 0x558a41de7693 <unknown>\nE       #8 0x558a41dba03a <unknown>\nE       #9 0x558a41dbb17e <unknown>\nE       #10 0x558a4200cdbd <unknown>\nE       #11 0x558a42010c6c <unknown>\nE       #12 0x558a4201a4b0 <unknown>\nE       #13 0x558a42011d63 <unknown>\nE       #14 0x558a41fe4c35 <unknown>\nE       #15 0x558a42035138 <unknown>\nE       #16 0x558a420352c7 <unknown>\nE       #17 0x558a42043093 <unknown>\nE       #18 0x7f062066cb43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"json_reader","time":{"start":1682801158296,"stop":1682801158297,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x558a4204afe3 <unknown>\n#1 0x558a41d89d36 <unknown>\n#2 0x558a41dc6c4d <unknown>\n#3 0x558a41dc6d61 <unknown>\n#4 0x558a41e026a4 <unknown>\n#5 0x558a41de78ed <unknown>\n#6 0x558a41e00232 <unknown>\n#7 0x558a41de7693 <unknown>\n#8 0x558a41dba03a <unknown>\n#9 0x558a41dbb17e <unknown>\n#10 0x558a4200cdbd <unknown>\n#11 0x558a42010c6c <unknown>\n#12 0x558a4201a4b0 <unknown>\n#13 0x558a42011d63 <unknown>\n#14 0x558a41fe4c35 <unknown>\n#15 0x558a42035138 <unknown>\n#16 0x558a420352c7 <unknown>\n#17 0x558a42043093 <unknown>\n#18 0x7f062066cb43 <unknown>","statusTrace":"self = <tests.test_login.TestLogin object at 0x7f1a309880a0>\njson_reader = <utils.json_parser.JsonParser object at 0x7f1a309f3010>\nrequest = <FixtureRequest for <Function test_logout>>\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user i want to be able to logout after a successful login.\")\n    @pytest.mark.run(order=2)\n    def test_logout(self, json_reader, request: FixtureRequest):\n        username = request.config.getini(\"username\")\n        password = request.config.getini(\"password\")\n        # example of a simple text attachment\n        allure.attach(body=username, name=\"username\", attachment_type=allure.attachment_type.TEXT)\n>       self.about_page.click_login_link()\n\ntests/test_login.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:19: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:21: in click\n    el: WebElement = self._wait.until(expected_conditions.element_to_be_clickable(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"d6ad48ed5a53c7d006bee454111085be\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f1a30803eb0>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x558a4204afe3 <unknown>\nE       #1 0x558a41d89d36 <unknown>\nE       #2 0x558a41dc6c4d <unknown>\nE       #3 0x558a41dc6d61 <unknown>\nE       #4 0x558a41e026a4 <unknown>\nE       #5 0x558a41de78ed <unknown>\nE       #6 0x558a41e00232 <unknown>\nE       #7 0x558a41de7693 <unknown>\nE       #8 0x558a41dba03a <unknown>\nE       #9 0x558a41dbb17e <unknown>\nE       #10 0x558a4200cdbd <unknown>\nE       #11 0x558a42010c6c <unknown>\nE       #12 0x558a4201a4b0 <unknown>\nE       #13 0x558a42011d63 <unknown>\nE       #14 0x558a41fe4c35 <unknown>\nE       #15 0x558a42035138 <unknown>\nE       #16 0x558a420352c7 <unknown>\nE       #17 0x558a42043093 <unknown>\nE       #18 0x7f062066cb43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1682801189346,"stop":1682801199576,"duration":10230},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x558a4204afe3 <unknown>\n#1 0x558a41d89d36 <unknown>\n#2 0x558a41dc6c4d <unknown>\n#3 0x558a41dc6d61 <unknown>\n#4 0x558a41e026a4 <unknown>\n#5 0x558a41de78ed <unknown>\n#6 0x558a41e00232 <unknown>\n#7 0x558a41de7693 <unknown>\n#8 0x558a41dba03a <unknown>\n#9 0x558a41dbb17e <unknown>\n#10 0x558a4200cdbd <unknown>\n#11 0x558a42010c6c <unknown>\n#12 0x558a4201a4b0 <unknown>\n#13 0x558a42011d63 <unknown>\n#14 0x558a41fe4c35 <unknown>\n#15 0x558a42035138 <unknown>\n#16 0x558a420352c7 <unknown>\n#17 0x558a42043093 <unknown>\n#18 0x7f062066cb43 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 19, in click_login_link\n    self.click(self.LOGIN_LINK)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 21, in click\n    el: WebElement = self._wait.until(expected_conditions.element_to_be_clickable(locator))\n  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py\", line 95, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"e8906aa6e7e8b431","name":"username","source":"e8906aa6e7e8b431.txt","type":"text/plain","size":18},{"uid":"5ed3695c78d47bd4","name":"Full Page Screenshot","source":"5ed3695c78d47bd4.png","type":"image/png","size":2646979},{"uid":"19de9e25166764e9","name":"URL","source":"19de9e25166764e9.uri","type":"text/uri-list","size":23},{"uid":"a83b698a970576cf","name":"public ip address","source":"a83b698a970576cf.txt","type":"text/plain","size":13},{"uid":"b088cc79bca20273","name":"Cookies","source":"b088cc79bca20273.json","type":"application/json","size":3014},{"uid":"2c065046a2410f18","name":"Session Storage","source":"2c065046a2410f18.json","type":"application/json","size":2},{"uid":"5276fbb1f1140c4a","name":"Local Storage","source":"5276fbb1f1140c4a.json","type":"application/json","size":1400},{"uid":"95fd6b2d3f2372d0","name":"Console Logs","source":"95fd6b2d3f2372d0.json","type":"application/json","size":5314},{"uid":"53552218ebab228f","name":"Network Logs","source":"53552218ebab228f.json","type":"application/json","size":84998}],"parameters":[],"stepsCount":1,"attachmentsCount":9,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Security"},{"name":"feature","value":"Login"},{"name":"severity","value":"blocker"},{"name":"story","value":"As a user i want to be able to logout after a successful login."},{"name":"tag","value":"run(order=2)"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az442-356"},{"name":"thread","value":"2274-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["run(order=2)","security"]},"source":"be459ff05325161.json","parameterValues":[]}