{
  "uid" : "89153377ffa2f9fc",
  "name" : "Forgot Password with invalid email test",
  "fullName" : "tests.test_forgot_password.TestForgotPassword#test_invalid_email",
  "historyId" : "415bbb87c1005e344ea1c6b819fb2117",
  "time" : {
    "start" : 1652012503783,
    "stop" : 1652012503783,
    "duration" : 0
  },
  "description" : "Forgot Password with invalid email address",
  "descriptionHtml" : "<p>Forgot Password with invalid email address</p>\n",
  "status" : "broken",
  "statusMessage" : "xlrd.biffh.XLRDError: Excel xlsx file; not supported",
  "statusTrace" : "self = <tests.test_forgot_password.TestForgotPassword object at 0x7f55c53eac70>\n\n    @allure.description(\"Forgot Password with invalid email address\")\n    @allure.title(\"Forgot Password with invalid email test\")\n    def test_invalid_email(self):\n>       emails = self.excel_reader.read_from_excel(\"Emails\")\n\ntests/test_forgot_password.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/excel_parser.py:13: in read_from_excel\n    work_book = xlrd.open_workbook(self.excel_path)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfilename = '/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/data/data.xlsx'\nlogfile = <_io.TextIOWrapper name=\"<_io.FileIO name=6 mode='rb+' closefd=True>\" mode='r+' encoding='utf-8'>\nverbosity = 0, use_mmap = True, file_contents = None, encoding_override = None\nformatting_info = False, on_demand = False, ragged_rows = False\nignore_workbook_corruption = False\n\n    def open_workbook(filename=None,\n                      logfile=sys.stdout,\n                      verbosity=0,\n                      use_mmap=True,\n                      file_contents=None,\n                      encoding_override=None,\n                      formatting_info=False,\n                      on_demand=False,\n                      ragged_rows=False,\n                      ignore_workbook_corruption=False\n                      ):\n        \"\"\"\n        Open a spreadsheet file for data extraction.\n    \n        :param filename: The path to the spreadsheet file to be opened.\n    \n        :param logfile: An open file to which messages and diagnostics are written.\n    \n        :param verbosity: Increases the volume of trace material written to the\n                          logfile.\n    \n        :param use_mmap:\n    \n          Whether to use the mmap module is determined heuristically.\n          Use this arg to override the result.\n    \n          Current heuristic: mmap is used if it exists.\n    \n        :param file_contents:\n    \n          A string or an :class:`mmap.mmap` object or some other behave-alike\n          object. If ``file_contents`` is supplied, ``filename`` will not be used,\n          except (possibly) in messages.\n    \n        :param encoding_override:\n    \n          Used to overcome missing or bad codepage information\n          in older-version files. See :doc:`unicode`.\n    \n        :param formatting_info:\n    \n          The default is ``False``, which saves memory.\n          In this case, \"Blank\" cells, which are those with their own formatting\n          information but no data, are treated as empty by ignoring the file's\n          ``BLANK`` and ``MULBLANK`` records.\n          This cuts off any bottom or right \"margin\" of rows of empty or blank\n          cells.\n          Only :meth:`~xlrd.sheet.Sheet.cell_value` and\n          :meth:`~xlrd.sheet.Sheet.cell_type` are available.\n    \n          When ``True``, formatting information will be read from the spreadsheet\n          file. This provides all cells, including empty and blank cells.\n          Formatting information is available for each cell.\n    \n          Note that this will raise a NotImplementedError when used with an\n          xlsx file.\n    \n        :param on_demand:\n    \n          Governs whether sheets are all loaded initially or when demanded\n          by the caller. See :doc:`on_demand`.\n    \n        :param ragged_rows:\n    \n          The default of ``False`` means all rows are padded out with empty cells so\n          that all rows have the same size as found in\n          :attr:`~xlrd.sheet.Sheet.ncols`.\n    \n          ``True`` means that there are no empty cells at the ends of rows.\n          This can result in substantial memory savings if rows are of widely\n          varying sizes. See also the :meth:`~xlrd.sheet.Sheet.row_len` method.\n    \n    \n        :param ignore_workbook_corruption:\n    \n          This option allows to read corrupted workbooks.\n          When ``False`` you may face CompDocError: Workbook corruption.\n          When ``True`` that exception will be ignored.\n    \n        :returns: An instance of the :class:`~xlrd.book.Book` class.\n        \"\"\"\n    \n        file_format = inspect_format(filename, file_contents)\n        # We have to let unknown file formats pass through here, as some ancient\n        # files that xlrd can parse don't start with the expected signature.\n        if file_format and file_format != 'xls':\n>           raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')\nE           xlrd.biffh.XLRDError: Excel xlsx file; not supported\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/xlrd/__init__.py:170: XLRDError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "prep_properties",
    "time" : {
      "start" : 1652012317953,
      "stop" : 1652012317964,
      "duration" : 11
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "pages",
    "time" : {
      "start" : 1652012503782,
      "stop" : 1652012503782,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "injector",
    "time" : {
      "start" : 1652012503782,
      "stop" : 1652012503782,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "write_allure_environment",
    "time" : {
      "start" : 1652012501543,
      "stop" : 1652012501543,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "create_driver",
    "time" : {
      "start" : 1652012501543,
      "stop" : 1652012503781,
      "duration" : 2238
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "Forgot Password with invalid email address",
    "status" : "broken",
    "statusMessage" : "xlrd.biffh.XLRDError: Excel xlsx file; not supported",
    "statusTrace" : "self = <tests.test_forgot_password.TestForgotPassword object at 0x7f55c53eac70>\n\n    @allure.description(\"Forgot Password with invalid email address\")\n    @allure.title(\"Forgot Password with invalid email test\")\n    def test_invalid_email(self):\n>       emails = self.excel_reader.read_from_excel(\"Emails\")\n\ntests/test_forgot_password.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/excel_parser.py:13: in read_from_excel\n    work_book = xlrd.open_workbook(self.excel_path)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfilename = '/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/data/data.xlsx'\nlogfile = <_io.TextIOWrapper name=\"<_io.FileIO name=6 mode='rb+' closefd=True>\" mode='r+' encoding='utf-8'>\nverbosity = 0, use_mmap = True, file_contents = None, encoding_override = None\nformatting_info = False, on_demand = False, ragged_rows = False\nignore_workbook_corruption = False\n\n    def open_workbook(filename=None,\n                      logfile=sys.stdout,\n                      verbosity=0,\n                      use_mmap=True,\n                      file_contents=None,\n                      encoding_override=None,\n                      formatting_info=False,\n                      on_demand=False,\n                      ragged_rows=False,\n                      ignore_workbook_corruption=False\n                      ):\n        \"\"\"\n        Open a spreadsheet file for data extraction.\n    \n        :param filename: The path to the spreadsheet file to be opened.\n    \n        :param logfile: An open file to which messages and diagnostics are written.\n    \n        :param verbosity: Increases the volume of trace material written to the\n                          logfile.\n    \n        :param use_mmap:\n    \n          Whether to use the mmap module is determined heuristically.\n          Use this arg to override the result.\n    \n          Current heuristic: mmap is used if it exists.\n    \n        :param file_contents:\n    \n          A string or an :class:`mmap.mmap` object or some other behave-alike\n          object. If ``file_contents`` is supplied, ``filename`` will not be used,\n          except (possibly) in messages.\n    \n        :param encoding_override:\n    \n          Used to overcome missing or bad codepage information\n          in older-version files. See :doc:`unicode`.\n    \n        :param formatting_info:\n    \n          The default is ``False``, which saves memory.\n          In this case, \"Blank\" cells, which are those with their own formatting\n          information but no data, are treated as empty by ignoring the file's\n          ``BLANK`` and ``MULBLANK`` records.\n          This cuts off any bottom or right \"margin\" of rows of empty or blank\n          cells.\n          Only :meth:`~xlrd.sheet.Sheet.cell_value` and\n          :meth:`~xlrd.sheet.Sheet.cell_type` are available.\n    \n          When ``True``, formatting information will be read from the spreadsheet\n          file. This provides all cells, including empty and blank cells.\n          Formatting information is available for each cell.\n    \n          Note that this will raise a NotImplementedError when used with an\n          xlsx file.\n    \n        :param on_demand:\n    \n          Governs whether sheets are all loaded initially or when demanded\n          by the caller. See :doc:`on_demand`.\n    \n        :param ragged_rows:\n    \n          The default of ``False`` means all rows are padded out with empty cells so\n          that all rows have the same size as found in\n          :attr:`~xlrd.sheet.Sheet.ncols`.\n    \n          ``True`` means that there are no empty cells at the ends of rows.\n          This can result in substantial memory savings if rows are of widely\n          varying sizes. See also the :meth:`~xlrd.sheet.Sheet.row_len` method.\n    \n    \n        :param ignore_workbook_corruption:\n    \n          This option allows to read corrupted workbooks.\n          When ``False`` you may face CompDocError: Workbook corruption.\n          When ``True`` that exception will be ignored.\n    \n        :returns: An instance of the :class:`~xlrd.book.Book` class.\n        \"\"\"\n    \n        file_format = inspect_format(filename, file_contents)\n        # We have to let unknown file formats pass through here, as some ancient\n        # files that xlrd can parse don't start with the expected signature.\n        if file_format and file_format != 'xls':\n>           raise XLRDError(FILE_FORMAT_DESCRIPTIONS[file_format]+'; not supported')\nE           xlrd.biffh.XLRDError: Excel xlsx file; not supported\n\n/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/xlrd/__init__.py:170: XLRDError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "26e210b26ab1e720",
      "name" : "log",
      "source" : "26e210b26ab1e720.txt",
      "type" : "text/plain",
      "size" : 366
    }, {
      "uid" : "ad4b128ccdbfcc74",
      "name" : "stderr",
      "source" : "ad4b128ccdbfcc74.txt",
      "type" : "text/plain",
      "size" : 237
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "write_allure_environment::0",
    "time" : {
      "start" : 1652012503998,
      "stop" : 1652012503998,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "create_driver::0",
    "time" : {
      "start" : 1652012503794,
      "stop" : 1652012503997,
      "duration" : 203
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "27d6f1e51eb1556f",
      "name" : "screenshot on failure: 08/05/2022, 12:21:43",
      "source" : "27d6f1e51eb1556f.png",
      "type" : "image/png",
      "size" : 58830
    }, {
      "uid" : "8a9086e5f9d1da",
      "name" : "public ip address",
      "source" : "8a9086e5f9d1da.txt",
      "type" : "text/plain",
      "size" : 13
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : false,
    "hasContent" : true
  } ],
  "labels" : [ {
    "name" : "epic",
    "value" : "Security"
  }, {
    "name" : "story",
    "value" : "Forgot Password Feature's Functionality"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "tag",
    "value" : "security"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_forgot_password"
  }, {
    "name" : "subSuite",
    "value" : "TestForgotPassword"
  }, {
    "name" : "host",
    "value" : "fv-az191-831"
  }, {
    "name" : "thread",
    "value" : "2153-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_forgot_password"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "security" ]
  },
  "source" : "89153377ffa2f9fc.json",
  "parameterValues" : [ ]
}