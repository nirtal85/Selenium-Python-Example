{"uid":"5c5543dac8b75e48","name":"Logout of system test","fullName":"tests.login_test.TestLogin#test_logout","historyId":"02960432bfedc83802b1c084438f79b1","time":{"start":1705281613169,"stop":1705281623396,"duration":10227},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5612afde5f83 <unknown>\n#1 0x5612afa9ecf7 <unknown>\n#2 0x5612afaee99e <unknown>\n#3 0x5612afaeeaa1 <unknown>\n#4 0x5612afb39d64 <unknown>\n#5 0x5612afb180dd <unknown>\n#6 0x5612afb37006 <unknown>\n#7 0x5612afb17e53 <unknown>\n#8 0x5612afadfdd4 <unknown>\n#9 0x5612afae11de <unknown>\n#10 0x5612afdaa531 <unknown>\n#11 0x5612afdae455 <unknown>\n#12 0x5612afd96f55 <unknown>\n#13 0x5612afdaf0ef <unknown>\n#14 0x5612afd7a99f <unknown>\n#15 0x5612afdd3008 <unknown>\n#16 0x5612afdd31d7 <unknown>\n#17 0x5612afde5124 <unknown>\n#18 0x7fef65894ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7fdc25b4d310>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...iteria', non_existing_project='Non Existing', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Path(Path(__file__).absolute().parent.parent, \"data\", \"dog.png\"),\n            name=\"Attach file example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"TXT example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"some attachment name\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"8cb485a00f7a92f1069145a011db08e0\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7fdc25c0eb60>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x5612afde5f83 <unknown>\nE       #1 0x5612afa9ecf7 <unknown>\nE       #2 0x5612afaee99e <unknown>\nE       #3 0x5612afaeeaa1 <unknown>\nE       #4 0x5612afb39d64 <unknown>\nE       #5 0x5612afb180dd <unknown>\nE       #6 0x5612afb37006 <unknown>\nE       #7 0x5612afb17e53 <unknown>\nE       #8 0x5612afadfdd4 <unknown>\nE       #9 0x5612afae11de <unknown>\nE       #10 0x5612afdaa531 <unknown>\nE       #11 0x5612afdae455 <unknown>\nE       #12 0x5612afd96f55 <unknown>\nE       #13 0x5612afdaf0ef <unknown>\nE       #14 0x5612afd7a99f <unknown>\nE       #15 0x5612afdd3008 <unknown>\nE       #16 0x5612afdd31d7 <unknown>\nE       #17 0x5612afde5124 <unknown>\nE       #18 0x7fef65894ac3 <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1705281364488,"stop":1705281364489,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1705281364488,"stop":1705281364488,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"data","time":{"start":1705281364489,"stop":1705281364489,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5612afde5f83 <unknown>\n#1 0x5612afa9ecf7 <unknown>\n#2 0x5612afaee99e <unknown>\n#3 0x5612afaeeaa1 <unknown>\n#4 0x5612afb39d64 <unknown>\n#5 0x5612afb180dd <unknown>\n#6 0x5612afb37006 <unknown>\n#7 0x5612afb17e53 <unknown>\n#8 0x5612afadfdd4 <unknown>\n#9 0x5612afae11de <unknown>\n#10 0x5612afdaa531 <unknown>\n#11 0x5612afdae455 <unknown>\n#12 0x5612afd96f55 <unknown>\n#13 0x5612afdaf0ef <unknown>\n#14 0x5612afd7a99f <unknown>\n#15 0x5612afdd3008 <unknown>\n#16 0x5612afdd31d7 <unknown>\n#17 0x5612afde5124 <unknown>\n#18 0x7fef65894ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7fdc25b4d310>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...iteria', non_existing_project='Non Existing', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Path(Path(__file__).absolute().parent.parent, \"data\", \"dog.png\"),\n            name=\"Attach file example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"TXT example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"some attachment name\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"8cb485a00f7a92f1069145a011db08e0\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7fdc25c0eb60>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x5612afde5f83 <unknown>\nE       #1 0x5612afa9ecf7 <unknown>\nE       #2 0x5612afaee99e <unknown>\nE       #3 0x5612afaeeaa1 <unknown>\nE       #4 0x5612afb39d64 <unknown>\nE       #5 0x5612afb180dd <unknown>\nE       #6 0x5612afb37006 <unknown>\nE       #7 0x5612afb17e53 <unknown>\nE       #8 0x5612afadfdd4 <unknown>\nE       #9 0x5612afae11de <unknown>\nE       #10 0x5612afdaa531 <unknown>\nE       #11 0x5612afdae455 <unknown>\nE       #12 0x5612afd96f55 <unknown>\nE       #13 0x5612afdaf0ef <unknown>\nE       #14 0x5612afd7a99f <unknown>\nE       #15 0x5612afdd3008 <unknown>\nE       #16 0x5612afdd31d7 <unknown>\nE       #17 0x5612afde5124 <unknown>\nE       #18 0x7fef65894ac3 <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1705281613172,"stop":1705281623396,"duration":10224},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5612afde5f83 <unknown>\n#1 0x5612afa9ecf7 <unknown>\n#2 0x5612afaee99e <unknown>\n#3 0x5612afaeeaa1 <unknown>\n#4 0x5612afb39d64 <unknown>\n#5 0x5612afb180dd <unknown>\n#6 0x5612afb37006 <unknown>\n#7 0x5612afb17e53 <unknown>\n#8 0x5612afadfdd4 <unknown>\n#9 0x5612afae11de <unknown>\n#10 0x5612afdaa531 <unknown>\n#11 0x5612afdae455 <unknown>\n#12 0x5612afd96f55 <unknown>\n#13 0x5612afdaf0ef <unknown>\n#14 0x5612afd7a99f <unknown>\n#15 0x5612afdd3008 <unknown>\n#16 0x5612afdd31d7 <unknown>\n#17 0x5612afde5124 <unknown>\n#18 0x7fef65894ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 20, in click_login_link\n    self.click(self.LOGIN_LINK)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 60, in click\n    el: WebElement = self.wait.until(\n                     ^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"4104a267d31f8e9a","name":"HTML example","source":"4104a267d31f8e9a.html","type":"text/html","size":32},{"uid":"3316909002fb4b68","name":"Attach file example","source":"3316909002fb4b68.png","type":"image/png","size":14730},{"uid":"3e3da2dbce816d4b","name":"TXT example","source":"3e3da2dbce816d4b.txt","type":"text/plain","size":17},{"uid":"b6ddba7f263ea88d","name":"CSV example","source":"b6ddba7f263ea88d.csv","type":"text/csv","size":32},{"uid":"3b8786974ba7e951","name":"JSON example","source":"3b8786974ba7e951.json","type":"application/json","size":31},{"uid":"61733e155fa228ff","name":"some attachment name","source":"61733e155fa228ff.xml","type":"application/xml","size":140},{"uid":"8f581fb69c438769","name":"URI List example","source":"8f581fb69c438769.uri","type":"text/uri-list","size":70},{"uid":"743ce4c8208643d8","name":"public ip address","source":"743ce4c8208643d8.txt","type":"text/plain","size":15},{"uid":"4a09f0e362ad04c5","name":"Cookies","source":"4a09f0e362ad04c5.json","type":"application/json","size":4465},{"uid":"12d2d784303b842e","name":"Session Storage","source":"12d2d784303b842e.json","type":"application/json","size":359},{"uid":"6806a012456c74da","name":"Local Storage","source":"6806a012456c74da.json","type":"application/json","size":208},{"uid":"39f59034ed698a4b","name":"Console Logs","source":"39f59034ed698a4b.json","type":"application/json","size":2},{"uid":"4a5c86e9474acb88","name":"Full Page Screenshot","source":"4a5c86e9474acb88.png","type":"image/png","size":5722432},{"uid":"e7ebd3b3b35f1941","name":"URL","source":"e7ebd3b3b35f1941.uri","type":"text/uri-list","size":23},{"uid":"a04c869e4e1b60f1","name":"Network Logs","source":"a04c869e4e1b60f1.json","type":"application/json","size":857257}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":15,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"severity","value":"blocker"},{"name":"feature","value":"Login"},{"name":"epic","value":"Security"},{"name":"story","value":"As a user I want to be able to logout after a successful login."},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"login_test"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az1200-785"},{"name":"thread","value":"2312-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.login_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"******"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security"]},"source":"5c5543dac8b75e48.json","parameterValues":["******"]}