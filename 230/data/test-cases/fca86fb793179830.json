{"uid":"fca86fb793179830","name":"Logout of system test","fullName":"tests.login_test.TestLogin#test_logout","historyId":"00318e1847d2b7d6804e8c0adc55a152","time":{"start":1710983613945,"stop":1710983624241,"duration":10296},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x564287436f33 <unknown>\n#1 0x56428712ece6 <unknown>\n#2 0x564287179e48 <unknown>\n#3 0x564287179f01 <unknown>\n#4 0x5642871bd3f4 <unknown>\n#5 0x56428719bedd <unknown>\n#6 0x5642871ba899 <unknown>\n#7 0x56428719bc53 <unknown>\n#8 0x56428716cdb3 <unknown>\n#9 0x56428716d77e <unknown>\n#10 0x5642873fc86b <unknown>\n#11 0x564287400885 <unknown>\n#12 0x5642873ea181 <unknown>\n#13 0x564287401412 <unknown>\n#14 0x5642873ce25f <unknown>\n#15 0x564287425528 <unknown>\n#16 0x564287425723 <unknown>\n#17 0x5642874360e4 <unknown>\n#18 0x7f57e7694ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f6624bc49b0>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9cc7a07db46ce819d755e1f553afe20e\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f6624a884a0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x564287436f33 <unknown>\nE       #1 0x56428712ece6 <unknown>\nE       #2 0x564287179e48 <unknown>\nE       #3 0x564287179f01 <unknown>\nE       #4 0x5642871bd3f4 <unknown>\nE       #5 0x56428719bedd <unknown>\nE       #6 0x5642871ba899 <unknown>\nE       #7 0x56428719bc53 <unknown>\nE       #8 0x56428716cdb3 <unknown>\nE       #9 0x56428716d77e <unknown>\nE       #10 0x5642873fc86b <unknown>\nE       #11 0x564287400885 <unknown>\nE       #12 0x5642873ea181 <unknown>\nE       #13 0x564287401412 <unknown>\nE       #14 0x5642873ce25f <unknown>\nE       #15 0x564287425528 <unknown>\nE       #16 0x564287425723 <unknown>\nE       #17 0x5642874360e4 <unknown>\nE       #18 0x7f57e7694ac3 <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1710983363999,"stop":1710983364000,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1710983364000,"stop":1710983364000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"session_request","time":{"start":1710983364000,"stop":1710983364000,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"data","time":{"start":1710983364000,"stop":1710983364001,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x564287436f33 <unknown>\n#1 0x56428712ece6 <unknown>\n#2 0x564287179e48 <unknown>\n#3 0x564287179f01 <unknown>\n#4 0x5642871bd3f4 <unknown>\n#5 0x56428719bedd <unknown>\n#6 0x5642871ba899 <unknown>\n#7 0x56428719bc53 <unknown>\n#8 0x56428716cdb3 <unknown>\n#9 0x56428716d77e <unknown>\n#10 0x5642873fc86b <unknown>\n#11 0x564287400885 <unknown>\n#12 0x5642873ea181 <unknown>\n#13 0x564287401412 <unknown>\n#14 0x5642873ce25f <unknown>\n#15 0x564287425528 <unknown>\n#16 0x564287425723 <unknown>\n#17 0x5642874360e4 <unknown>\n#18 0x7f57e7694ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f6624bc49b0>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"9cc7a07db46ce819d755e1f553afe20e\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f6624a884a0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x564287436f33 <unknown>\nE       #1 0x56428712ece6 <unknown>\nE       #2 0x564287179e48 <unknown>\nE       #3 0x564287179f01 <unknown>\nE       #4 0x5642871bd3f4 <unknown>\nE       #5 0x56428719bedd <unknown>\nE       #6 0x5642871ba899 <unknown>\nE       #7 0x56428719bc53 <unknown>\nE       #8 0x56428716cdb3 <unknown>\nE       #9 0x56428716d77e <unknown>\nE       #10 0x5642873fc86b <unknown>\nE       #11 0x564287400885 <unknown>\nE       #12 0x5642873ea181 <unknown>\nE       #13 0x564287401412 <unknown>\nE       #14 0x5642873ce25f <unknown>\nE       #15 0x564287425528 <unknown>\nE       #16 0x564287425723 <unknown>\nE       #17 0x5642874360e4 <unknown>\nE       #18 0x7f57e7694ac3 <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1710983613947,"stop":1710983624240,"duration":10293},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x564287436f33 <unknown>\n#1 0x56428712ece6 <unknown>\n#2 0x564287179e48 <unknown>\n#3 0x564287179f01 <unknown>\n#4 0x5642871bd3f4 <unknown>\n#5 0x56428719bedd <unknown>\n#6 0x5642871ba899 <unknown>\n#7 0x56428719bc53 <unknown>\n#8 0x56428716cdb3 <unknown>\n#9 0x56428716d77e <unknown>\n#10 0x5642873fc86b <unknown>\n#11 0x564287400885 <unknown>\n#12 0x5642873ea181 <unknown>\n#13 0x564287401412 <unknown>\n#14 0x5642873ce25f <unknown>\n#15 0x564287425528 <unknown>\n#16 0x564287425723 <unknown>\n#17 0x5642874360e4 <unknown>\n#18 0x7f57e7694ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 20, in click_login_link\n    self.click(self.LOGIN_LINK)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 60, in click\n    el: WebElement = self.wait.until(\n                     ^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"public ip address","time":{"start":1710983624251,"stop":1710983624373,"duration":122},"status":"passed","steps":[],"attachments":[{"uid":"d97a637848d404bc","name":"HTTP logs of http://checkip.amazonaws.com/","source":"d97a637848d404bc.txt","type":"text/plain","size":263}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"797aee7e8bde27b5","name":"HTML Attachment Example","source":"797aee7e8bde27b5.html","type":"text/html","size":32},{"uid":"859a0239a154c872","name":"File Attachment Example","source":"859a0239a154c872.png","type":"image/png","size":14730},{"uid":"4a71b69e0e64bb15","name":"Text Attachment Example","source":"4a71b69e0e64bb15.txt","type":"text/plain","size":17},{"uid":"5519224e7d3077f8","name":"CSV Attachment Example","source":"5519224e7d3077f8.csv","type":"text/csv","size":32},{"uid":"9bed4891d143c0a5","name":"JSON Attachment Example","source":"9bed4891d143c0a5.json","type":"application/json","size":31},{"uid":"b7d96d45b2077830","name":"XML Attachment Example","source":"b7d96d45b2077830.xml","type":"application/xml","size":140},{"uid":"a815fd8cec47a256","name":"URI List Attachment Example","source":"a815fd8cec47a256.uri","type":"text/uri-list","size":70},{"uid":"4efc2d63419a26d5","name":"Cookies","source":"4efc2d63419a26d5.json","type":"application/json","size":3159},{"uid":"f23ca7b80d556f8b","name":"Session Storage","source":"f23ca7b80d556f8b.json","type":"application/json","size":358},{"uid":"ff6a0707b13ba07f","name":"Local Storage","source":"ff6a0707b13ba07f.json","type":"application/json","size":208},{"uid":"74330a3ba47457c7","name":"Console Logs","source":"74330a3ba47457c7.json","type":"application/json","size":653},{"uid":"6d86848ae7f5199e","name":"Full Page Screenshot","source":"6d86848ae7f5199e.png","type":"image/png","size":6185473},{"uid":"7bf5f8a238adf426","name":"URL","source":"7bf5f8a238adf426.uri","type":"text/uri-list","size":23},{"uid":"9785983f6a0be210","name":"Network Logs","source":"9785983f6a0be210.json","type":"application/json","size":913096}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":15,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"session_request::0","time":{"start":1710983628681,"stop":1710983628681,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"As a user I want to be able to logout after a successful login."},{"name":"epic","value":"Security"},{"name":"severity","value":"blocker"},{"name":"feature","value":"Login"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"login_test"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az801-737"},{"name":"thread","value":"2498-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.login_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"******"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security"]},"source":"fca86fb793179830.json","parameterValues":["******"]}