{"uid":"f248debf17d13e82","name":"Forgot Password with valid email test","fullName":"tests.forgot_password_test.TestForgotPassword#test_valid_email","time":{"start":1739410651724,"stop":1739410651724,"duration":0},"description":"Forgot password with a valid email address","descriptionHtml":"<p>Forgot password with a valid email address</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: JavaScript code failed\nfrom unknown command: 'Runtime.evaluate' wasn't found\n  (Session info: chrome=133.0.6943.53)\nStacktrace:\n#0 0x561b9c2aa09a <unknown>\n#1 0x561b9bd718b0 <unknown>\n#2 0x561b9bd57e51 <unknown>\n#3 0x561b9bd566fd <unknown>\n#4 0x561b9bd56eaf <unknown>\n#5 0x561b9bd85757 <unknown>\n#6 0x561b9bd7a6b1 <unknown>\n#7 0x561b9bd7a5a8 <unknown>\n#8 0x561b9bd4877a <unknown>\n#9 0x561b9bd46be4 <unknown>\n#10 0x561b9be235cf <unknown>\n#11 0x561b9bde8982 <unknown>\n#12 0x561b9be0eb8b <unknown>\n#13 0x561b9bde8753 <unknown>\n#14 0x561b9bdb438e <unknown>\n#15 0x561b9bdb5b51 <unknown>\n#16 0x561b9c27376b <unknown>\n#17 0x561b9c2776f2 <unknown>\n#18 0x561b9c25f8fc <unknown>\n#19 0x561b9c2782e4 <unknown>\n#20 0x561b9c2439cf <unknown>\n#21 0x561b9c298cd8 <unknown>\n#22 0x561b9c298eb6 <unknown>\n#23 0x561b9c2a8f16 <unknown>\n#24 0x7f1c2ca9caa4 <unknown>\n#25 0x7f1c2cb29c3c <unknown>","statusTrace":"item = <Function test_valid_email>\n\n    def pytest_runtest_setup(item: Item) -> None:\n        global browser, driver, chrome_options, wait\n        browser = item.config.getoption(\"driver\")\n        base_url = item.config.getoption(\"base_url\")\n        if browser in (\"chrome\", \"chrome_headless\"):\n            chrome_options = webdriver.ChromeOptions()\n            chrome_options.set_capability(\n                \"goog:loggingPrefs\", {\"performance\": \"ALL\", \"browser\": \"ALL\"}\n            )\n            chrome_options.add_experimental_option(\"excludeSwitches\", [\"enable-automation\"])\n            chrome_options.add_experimental_option(\n                \"prefs\",\n                {\n                    \"profile.default_content_setting_values.notifications\": 2,\n                    \"profile.default_content_setting_values.media_stream_mic\": 1,\n                    \"profile.default_content_setting_values.geolocation\": 1,\n                    \"profile.default_content_setting_values.media_stream_camera\": 1,\n                    \"credentials_enable_service\": False,\n                    \"profile.password_manager_enabled\": False,\n                    \"safebrowsing.enabled\": False,\n                    \"download.default_directory\": os.path.abspath(\n                        Constants.CHROME_DOWNLOAD_DIRECTORY.absolute().as_posix()\n                    ),\n                },\n            )\n            chrome_options.enable_bidi = True\n            chrome_options.add_argument(\"disable-dev-shm-usage\")\n            chrome_options.add_argument(\"no-sandbox\")\n            chrome_options.add_argument(\"allow-file-access-from-files\")\n            chrome_options.add_argument(\"use-fake-device-for-media-stream\")\n            chrome_options.add_argument(\"hide-scrollbars\")\n            chrome_options.add_argument(\"disable-popup-blocking\")\n            chrome_options.add_argument(\"disable-notifications\")\n            chrome_options.add_argument(\"disable-infobars\")\n            # https://www.selenium.dev/blog/2024/chrome-browser-woes/\n            chrome_options.add_argument(\"disable-search-engine-choice-screen\")\n            chrome_options.add_argument(\n                \"disable-features=IsolateOrigins,site-per-process,VizDisplayCompositor,\"\n                \"SidePanelPinning,OptimizationGuideModelDownloading,OptimizationHintsFetching,\"\n                \"OptimizationTargetPrediction,OptimizationHints\"\n            )\n            # example of adding specific chrome option based on test file name\n            if item.fspath.purebasename == \"workspaces_test\":\n                chrome_options.add_argument(\"use-fake-ui-for-media-stream\")\n            # example of adding specific chrome option based on test name\n            if item.name == \"test_invalid_login\":\n                chrome_options.add_argument(f\"user-agent={Constants.AUTOMATION_USER_AGENT}\")\n        match browser:\n            case \"firefox\":\n                driver = webdriver.Firefox()\n            case \"chrome_headless\":\n                chrome_options.add_argument(\"headless=new\")\n                chrome_options.add_argument(\"force-device-scale-factor=0.6\")\n                chrome_options.add_argument(\"window-size=1920,1080\")\n                driver = webdriver.Chrome(options=chrome_options)\n            # https://stackoverflow.com/questions/76430192/getting-typeerror-webdriver-init-got-an-unexpected-keyword-argument-desi\n            case \"remote\":\n                chrome_options = webdriver.ChromeOptions()\n                # https://aerokube.com/images/latest/#_chrome\n                chrome_options.browser_version = \"127.0\"\n                chrome_options.set_capability(\n                    \"selenoid:options\",\n                    {\n                        \"enableVNC\": True,\n                        \"enableVideo\": True,\n                        \"videoName\": f\"{item.name}.mp4\",\n                    },\n                )\n                driver = webdriver.Remote(\n                    command_executor=\"http://localhost:4444/wd/hub\", options=chrome_options\n                )\n            case _:\n                if item.config.getoption(\"decorate_driver\"):\n                    driver = EventFiringWebDriver(\n                        webdriver.Chrome(options=chrome_options), DriverEventListener()\n                    )\n                else:\n                    driver = webdriver.Chrome(options=chrome_options)\n        item.cls.driver = driver\n>       driver.maximize_window()\n\ntests/conftest.py:215: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:622: in maximize_window\n    self.execute(command, None)\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f7e70a21490>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: JavaScript code failed\\\\nfrom un...\\\\n#23 0x561b9c2a8f16 \\\\u003Cunknown>\\\\n#24 0x7f1c2ca9caa4 \\\\u003Cunknown>\\\\n#25 0x7f1c2cb29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: JavaScript code failed\nE       from unknown command: 'Runtime.evaluate' wasn't found\nE         (Session info: chrome=133.0.6943.53)\nE       Stacktrace:\nE       #0 0x561b9c2aa09a <unknown>\nE       #1 0x561b9bd718b0 <unknown>\nE       #2 0x561b9bd57e51 <unknown>\nE       #3 0x561b9bd566fd <unknown>\nE       #4 0x561b9bd56eaf <unknown>\nE       #5 0x561b9bd85757 <unknown>\nE       #6 0x561b9bd7a6b1 <unknown>\nE       #7 0x561b9bd7a5a8 <unknown>\nE       #8 0x561b9bd4877a <unknown>\nE       #9 0x561b9bd46be4 <unknown>\nE       #10 0x561b9be235cf <unknown>\nE       #11 0x561b9bde8982 <unknown>\nE       #12 0x561b9be0eb8b <unknown>\nE       #13 0x561b9bde8753 <unknown>\nE       #14 0x561b9bdb438e <unknown>\nE       #15 0x561b9bdb5b51 <unknown>\nE       #16 0x561b9c27376b <unknown>\nE       #17 0x561b9c2776f2 <unknown>\nE       #18 0x561b9c25f8fc <unknown>\nE       #19 0x561b9c2782e4 <unknown>\nE       #20 0x561b9c2439cf <unknown>\nE       #21 0x561b9c298cd8 <unknown>\nE       #22 0x561b9c298eb6 <unknown>\nE       #23 0x561b9c2a8f16 <unknown>\nE       #24 0x7f1c2ca9caa4 <unknown>\nE       #25 0x7f1c2cb29c3c <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"f248debf17d13e82.json","parameterValues":[]}