{"uid":"b2a44ada4dcb6bb2","name":"Logout of system test","fullName":"tests.login_test.TestLogin#test_logout","historyId":"ea134fe9f9fb2eb3b3fd7762a295c304","time":{"start":1724894717884,"stop":1724894728199,"duration":10315},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x558b7ef9a81a <unknown>\n#1 0x558b7ec68e50 <unknown>\n#2 0x558b7ecb8644 <unknown>\n#3 0x558b7ecb8931 <unknown>\n#4 0x558b7ecfe534 <unknown>\n#5 0x558b7ecdd4bd <unknown>\n#6 0x558b7ecfb9c6 <unknown>\n#7 0x558b7ecdd233 <unknown>\n#8 0x558b7ecab093 <unknown>\n#9 0x558b7ecac09e <unknown>\n#10 0x558b7ef61a7b <unknown>\n#11 0x558b7ef65a31 <unknown>\n#12 0x558b7ef4d645 <unknown>\n#13 0x558b7ef665a2 <unknown>\n#14 0x558b7ef3281f <unknown>\n#15 0x558b7ef89618 <unknown>\n#16 0x558b7ef897e2 <unknown>\n#17 0x558b7ef9960c <unknown>\n#18 0x7f18bfa94ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f74ea4f6660>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ee7e5d2ee6fcd1e905949b8451bf58b8\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f74ea068720>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x558b7ef9a81a <unknown>\nE       #1 0x558b7ec68e50 <unknown>\nE       #2 0x558b7ecb8644 <unknown>\nE       #3 0x558b7ecb8931 <unknown>\nE       #4 0x558b7ecfe534 <unknown>\nE       #5 0x558b7ecdd4bd <unknown>\nE       #6 0x558b7ecfb9c6 <unknown>\nE       #7 0x558b7ecdd233 <unknown>\nE       #8 0x558b7ecab093 <unknown>\nE       #9 0x558b7ecac09e <unknown>\nE       #10 0x558b7ef61a7b <unknown>\nE       #11 0x558b7ef65a31 <unknown>\nE       #12 0x558b7ef4d645 <unknown>\nE       #13 0x558b7ef665a2 <unknown>\nE       #14 0x558b7ef3281f <unknown>\nE       #15 0x558b7ef89618 <unknown>\nE       #16 0x558b7ef897e2 <unknown>\nE       #17 0x558b7ef9960c <unknown>\nE       #18 0x7f18bfa94ac3 <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x558b7ef9a81a <unknown>\n#1 0x558b7ec68e50 <unknown>\n#2 0x558b7ecb8644 <unknown>\n#3 0x558b7ecb8931 <unknown>\n#4 0x558b7ecfe534 <unknown>\n#5 0x558b7ecdd4bd <unknown>\n#6 0x558b7ecfb9c6 <unknown>\n#7 0x558b7ecdd233 <unknown>\n#8 0x558b7ecab093 <unknown>\n#9 0x558b7ecac09e <unknown>\n#10 0x558b7ef61a7b <unknown>\n#11 0x558b7ef65a31 <unknown>\n#12 0x558b7ef4d645 <unknown>\n#13 0x558b7ef665a2 <unknown>\n#14 0x558b7ef3281f <unknown>\n#15 0x558b7ef89618 <unknown>\n#16 0x558b7ef897e2 <unknown>\n#17 0x558b7ef9960c <unknown>\n#18 0x7f18bfa94ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7f74ea4f6660>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ee7e5d2ee6fcd1e905949b8451bf58b8\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f74ea068720>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x558b7ef9a81a <unknown>\nE       #1 0x558b7ec68e50 <unknown>\nE       #2 0x558b7ecb8644 <unknown>\nE       #3 0x558b7ecb8931 <unknown>\nE       #4 0x558b7ecfe534 <unknown>\nE       #5 0x558b7ecdd4bd <unknown>\nE       #6 0x558b7ecfb9c6 <unknown>\nE       #7 0x558b7ecdd233 <unknown>\nE       #8 0x558b7ecab093 <unknown>\nE       #9 0x558b7ecac09e <unknown>\nE       #10 0x558b7ef61a7b <unknown>\nE       #11 0x558b7ef65a31 <unknown>\nE       #12 0x558b7ef4d645 <unknown>\nE       #13 0x558b7ef665a2 <unknown>\nE       #14 0x558b7ef3281f <unknown>\nE       #15 0x558b7ef89618 <unknown>\nE       #16 0x558b7ef897e2 <unknown>\nE       #17 0x558b7ef9960c <unknown>\nE       #18 0x7f18bfa94ac3 <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1724894717886,"stop":1724894728199,"duration":10313},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x558b7ef9a81a <unknown>\n#1 0x558b7ec68e50 <unknown>\n#2 0x558b7ecb8644 <unknown>\n#3 0x558b7ecb8931 <unknown>\n#4 0x558b7ecfe534 <unknown>\n#5 0x558b7ecdd4bd <unknown>\n#6 0x558b7ecfb9c6 <unknown>\n#7 0x558b7ecdd233 <unknown>\n#8 0x558b7ecab093 <unknown>\n#9 0x558b7ecac09e <unknown>\n#10 0x558b7ef61a7b <unknown>\n#11 0x558b7ef65a31 <unknown>\n#12 0x558b7ef4d645 <unknown>\n#13 0x558b7ef665a2 <unknown>\n#14 0x558b7ef3281f <unknown>\n#15 0x558b7ef89618 <unknown>\n#16 0x558b7ef897e2 <unknown>\n#17 0x558b7ef9960c <unknown>\n#18 0x7f18bfa94ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 20, in click_login_link\n    self.click(self.LOGIN_LINK)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 60, in click\n    el: WebElement = self.wait.until(\n                     ^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"public ip address","time":{"start":1724894728209,"stop":1724894728333,"duration":124},"status":"passed","steps":[],"attachments":[{"uid":"6a66ff4df135660e","name":"HTTP logs of http://checkip.amazonaws.com/","source":"6a66ff4df135660e.txt","type":"text/plain","size":357}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"e222f2535f2f973a","name":"HTML Attachment Example","source":"e222f2535f2f973a.html","type":"text/html","size":32},{"uid":"9a229294e1fdaaff","name":"File Attachment Example","source":"9a229294e1fdaaff.png","type":"image/png","size":14730},{"uid":"7ca80c1558506f44","name":"Text Attachment Example","source":"7ca80c1558506f44.txt","type":"text/plain","size":17},{"uid":"5934915b55ab2fb5","name":"CSV Attachment Example","source":"5934915b55ab2fb5.csv","type":"text/csv","size":32},{"uid":"8b71da0a466809a9","name":"JSON Attachment Example","source":"8b71da0a466809a9.json","type":"application/json","size":31},{"uid":"d641a86c1b2a7f7f","name":"XML Attachment Example","source":"d641a86c1b2a7f7f.xml","type":"application/xml","size":140},{"uid":"5d39ff42d4e76110","name":"URI List Attachment Example","source":"5d39ff42d4e76110.uri","type":"text/uri-list","size":70},{"uid":"9e055a89963038a3","name":"Cookies","source":"9e055a89963038a3.json","type":"application/json","size":3586},{"uid":"e2e9d75c9525a7bb","name":"Session Storage","source":"e2e9d75c9525a7bb.json","type":"application/json","size":359},{"uid":"845a020e1b94036","name":"Local Storage","source":"845a020e1b94036.json","type":"application/json","size":350},{"uid":"9ad4702ef72aaa2","name":"Console Logs","source":"9ad4702ef72aaa2.json","type":"application/json","size":236},{"uid":"6a09f5405c633404","name":"Full Page Screenshot","source":"6a09f5405c633404.png","type":"image/png","size":4598015},{"uid":"10ed5575126af3ba","name":"URL","source":"10ed5575126af3ba.uri","type":"text/uri-list","size":23},{"uid":"afa628120dada8f9","name":"Network Logs","source":"afa628120dada8f9.json","type":"application/json","size":66214}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":15,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"severity","value":"blocker"},{"name":"story","value":"As a user I want to be able to logout after a successful login."},{"name":"feature","value":"Login"},{"name":"epic","value":"Security"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"login_test"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az840-727"},{"name":"thread","value":"1862-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.login_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"******"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security"]},"source":"b2a44ada4dcb6bb2.json","parameterValues":["******"]}