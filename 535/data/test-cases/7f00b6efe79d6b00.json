{"uid":"7f00b6efe79d6b00","name":"Logout of system test","fullName":"tests.login_test.TestLogin#test_logout","historyId":"c0d16a0e4e3d9cfbd0b9bb3fcd7bc09a","time":{"start":1737337085569,"stop":1737337095788,"duration":10219},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5609b63b68fa <unknown>\n#1 0x5609b5ec7d20 <unknown>\n#2 0x5609b5f16a66 <unknown>\n#3 0x5609b5f16d01 <unknown>\n#4 0x5609b5f5c184 <unknown>\n#5 0x5609b5f3ab1d <unknown>\n#6 0x5609b5f59560 <unknown>\n#7 0x5609b5f3a893 <unknown>\n#8 0x5609b5f0930d <unknown>\n#9 0x5609b5f0a32e <unknown>\n#10 0x5609b638300b <unknown>\n#11 0x5609b6386f97 <unknown>\n#12 0x5609b636f71c <unknown>\n#13 0x5609b6387b17 <unknown>\n#14 0x5609b63546cf <unknown>\n#15 0x5609b63a56b8 <unknown>\n#16 0x5609b63a5880 <unknown>\n#17 0x5609b63b5776 <unknown>\n#18 0x7f87fc69ca94 <unknown>\n#19 0x7f87fc729c3c <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7fc769439220>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"7168fafd7d90bcd8b2a4754e3950633c\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7fc7691c5760>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x5609b63b68fa <unknown>\nE       #1 0x5609b5ec7d20 <unknown>\nE       #2 0x5609b5f16a66 <unknown>\nE       #3 0x5609b5f16d01 <unknown>\nE       #4 0x5609b5f5c184 <unknown>\nE       #5 0x5609b5f3ab1d <unknown>\nE       #6 0x5609b5f59560 <unknown>\nE       #7 0x5609b5f3a893 <unknown>\nE       #8 0x5609b5f0930d <unknown>\nE       #9 0x5609b5f0a32e <unknown>\nE       #10 0x5609b638300b <unknown>\nE       #11 0x5609b6386f97 <unknown>\nE       #12 0x5609b636f71c <unknown>\nE       #13 0x5609b6387b17 <unknown>\nE       #14 0x5609b63546cf <unknown>\nE       #15 0x5609b63a56b8 <unknown>\nE       #16 0x5609b63a5880 <unknown>\nE       #17 0x5609b63b5776 <unknown>\nE       #18 0x7f87fc69ca94 <unknown>\nE       #19 0x7f87fc729c3c <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1737337022081,"stop":1737337022081,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1737337022081,"stop":1737337022082,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"data","time":{"start":1737337022082,"stop":1737337022083,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"session_request","time":{"start":1737337022082,"stop":1737337022082,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5609b63b68fa <unknown>\n#1 0x5609b5ec7d20 <unknown>\n#2 0x5609b5f16a66 <unknown>\n#3 0x5609b5f16d01 <unknown>\n#4 0x5609b5f5c184 <unknown>\n#5 0x5609b5f3ab1d <unknown>\n#6 0x5609b5f59560 <unknown>\n#7 0x5609b5f3a893 <unknown>\n#8 0x5609b5f0930d <unknown>\n#9 0x5609b5f0a32e <unknown>\n#10 0x5609b638300b <unknown>\n#11 0x5609b6386f97 <unknown>\n#12 0x5609b636f71c <unknown>\n#13 0x5609b6387b17 <unknown>\n#14 0x5609b63546cf <unknown>\n#15 0x5609b63a56b8 <unknown>\n#16 0x5609b63a5880 <unknown>\n#17 0x5609b63b5776 <unknown>\n#18 0x7f87fc69ca94 <unknown>\n#19 0x7f87fc729c3c <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7fc769439220>\ndata = Data(forgot_password=ForgotPassword(error_message=\"We can't find a user with that e-mail address.\", success_message='A...ct='Non Existing', page_title='My Workspace', project_name='test project', project_type='quiz', template_type='Blank'))\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, data: Data):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param data: An instance of the Data dataclass containing test data.\n        :type data: Data\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML Attachment Example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Constants.DATA_PATH / \"dog.png\",\n            name=\"File Attachment Example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"Text Attachment Example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV Attachment Example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON Attachment Example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"XML Attachment Example\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List Attachment Example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:60: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"7168fafd7d90bcd8b2a4754e3950633c\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7fc7691c5760>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x5609b63b68fa <unknown>\nE       #1 0x5609b5ec7d20 <unknown>\nE       #2 0x5609b5f16a66 <unknown>\nE       #3 0x5609b5f16d01 <unknown>\nE       #4 0x5609b5f5c184 <unknown>\nE       #5 0x5609b5f3ab1d <unknown>\nE       #6 0x5609b5f59560 <unknown>\nE       #7 0x5609b5f3a893 <unknown>\nE       #8 0x5609b5f0930d <unknown>\nE       #9 0x5609b5f0a32e <unknown>\nE       #10 0x5609b638300b <unknown>\nE       #11 0x5609b6386f97 <unknown>\nE       #12 0x5609b636f71c <unknown>\nE       #13 0x5609b6387b17 <unknown>\nE       #14 0x5609b63546cf <unknown>\nE       #15 0x5609b63a56b8 <unknown>\nE       #16 0x5609b63a5880 <unknown>\nE       #17 0x5609b63b5776 <unknown>\nE       #18 0x7f87fc69ca94 <unknown>\nE       #19 0x7f87fc729c3c <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1737337085570,"stop":1737337095787,"duration":10217},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5609b63b68fa <unknown>\n#1 0x5609b5ec7d20 <unknown>\n#2 0x5609b5f16a66 <unknown>\n#3 0x5609b5f16d01 <unknown>\n#4 0x5609b5f5c184 <unknown>\n#5 0x5609b5f3ab1d <unknown>\n#6 0x5609b5f59560 <unknown>\n#7 0x5609b5f3a893 <unknown>\n#8 0x5609b5f0930d <unknown>\n#9 0x5609b5f0a32e <unknown>\n#10 0x5609b638300b <unknown>\n#11 0x5609b6386f97 <unknown>\n#12 0x5609b636f71c <unknown>\n#13 0x5609b6387b17 <unknown>\n#14 0x5609b63546cf <unknown>\n#15 0x5609b63a56b8 <unknown>\n#16 0x5609b63a5880 <unknown>\n#17 0x5609b63b5776 <unknown>\n#18 0x7f87fc69ca94 <unknown>\n#19 0x7f87fc729c3c <unknown>\n\n","statusTrace":"  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 20, in click_login_link\n    self.click(self.LOGIN_LINK)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 60, in click\n    el: WebElement = self.wait.until(\n                     ^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"public ip address","time":{"start":1737337095803,"stop":1737337095847,"duration":44},"status":"passed","steps":[],"attachments":[{"uid":"59a32c97b42b9597","name":"HTTP logs of http://checkip.amazonaws.com/","source":"59a32c97b42b9597.txt","type":"text/plain","size":356}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"15fdb7cc51cea797","name":"HTML Attachment Example","source":"15fdb7cc51cea797.html","type":"text/html","size":32},{"uid":"3ee183a51ffce023","name":"File Attachment Example","source":"3ee183a51ffce023.png","type":"image/png","size":14730},{"uid":"7d6f5d79cf69fc7f","name":"Text Attachment Example","source":"7d6f5d79cf69fc7f.txt","type":"text/plain","size":17},{"uid":"60f8eaf72ae5f998","name":"CSV Attachment Example","source":"60f8eaf72ae5f998.csv","type":"text/csv","size":32},{"uid":"cc6891b478d489a5","name":"JSON Attachment Example","source":"cc6891b478d489a5.json","type":"application/json","size":31},{"uid":"2413556230d38521","name":"XML Attachment Example","source":"2413556230d38521.xml","type":"application/xml","size":140},{"uid":"63ecb6611066c44","name":"URI List Attachment Example","source":"63ecb6611066c44.uri","type":"text/uri-list","size":70},{"uid":"96c10d2f229c9002","name":"Cookies","source":"96c10d2f229c9002.json","type":"application/json","size":3587},{"uid":"28c86f22e2a7ba1b","name":"Session Storage","source":"28c86f22e2a7ba1b.json","type":"application/json","size":357},{"uid":"1c6b028e23b4cb0d","name":"Local Storage","source":"1c6b028e23b4cb0d.json","type":"application/json","size":791},{"uid":"18b8d86499c2d024","name":"Console Logs","source":"18b8d86499c2d024.json","type":"application/json","size":236},{"uid":"c6761df908401cd0","name":"Full Page Screenshot","source":"c6761df908401cd0.png","type":"image/png","size":4119145},{"uid":"e05f68f5fc7e7b5a","name":"URL","source":"e05f68f5fc7e7b5a.uri","type":"text/uri-list","size":23},{"uid":"c01dc5e76c924bd4","name":"Network Logs","source":"c01dc5e76c924bd4.json","type":"application/json","size":6862885}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":15,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"session_request::0","time":{"start":1737337099113,"stop":1737337099113,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Security"},{"name":"feature","value":"Login"},{"name":"severity","value":"blocker"},{"name":"story","value":"As a user I want to be able to logout after a successful login."},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"login_test"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az1950-914"},{"name":"thread","value":"2012-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.login_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"******"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security"]},"source":"7f00b6efe79d6b00.json","parameterValues":["******"]}