{"uid":"b2627efcac4c4376","name":"Cancel a project deletion","fullName":"tests.test_workspaces.TestWorkspaces#test_cancel_project_deletion","time":{"start":1687125991897,"stop":1687125991897,"duration":0},"description":"Cancel project deletion","descriptionHtml":"<p>Cancel project deletion</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom no such execution context: uniqueContextId not found\n  (Session info: chrome=114.0.5735.106)\nStacktrace:\n#0 0x55cd99f614e3 <unknown>\n#1 0x55cd99c90c76 <unknown>\n#2 0x55cd99c7a8c3 <unknown>\n#3 0x55cd99c78bac <unknown>\n#4 0x55cd99c79162 <unknown>\n#5 0x55cd99c94af1 <unknown>\n#6 0x55cd99c9697e <unknown>\n#7 0x55cd99c96a4c <unknown>\n#8 0x55cd99cf5f77 <unknown>\n#9 0x55cd99cf447f <unknown>\n#10 0x55cd99cebde3 <unknown>\n#11 0x55cd99cc12dd <unknown>\n#12 0x55cd99cc234e <unknown>\n#13 0x55cd99f213e4 <unknown>\n#14 0x55cd99f253d7 <unknown>\n#15 0x55cd99f2fb20 <unknown>\n#16 0x55cd99f26023 <unknown>\n#17 0x55cd99ef41aa <unknown>\n#18 0x55cd99f4a6b8 <unknown>\n#19 0x55cd99f4a847 <unknown>\n#20 0x55cd99f5a243 <unknown>\n#21 0x7f4428fdeb43 <unknown>","statusTrace":"item = <Function test_cancel_project_deletion>\n\n    def pytest_runtest_setup(item: Item) -> None:\n        global browser, base_url, driver, chrome_options\n        browser = item.config.option.browser\n        base_url = item.config.getini(\"base_url\")\n        if browser in (\"chrome\", \"chrome_headless\"):\n            chrome_options = webdriver.ChromeOptions()\n            chrome_options.set_capability(\n                \"goog:loggingPrefs\", {\"performance\": \"ALL\", \"browser\": \"ALL\"}\n            )\n            chrome_options.add_experimental_option(\"excludeSwitches\", ['enable-automation'])\n            chrome_options.add_experimental_option(\"prefs\", {\n                \"profile.default_content_setting_values.notifications\": 2,\n                \"profile.default_content_setting_values.media_stream_mic\": 1,\n                \"profile.default_content_setting_values.geolocation\": 1,\n                \"profile.default_content_setting_values.media_stream_camera\": 1,\n                \"credentials_enable_service\": False,\n                \"profile.password_manager_enabled\": False})\n            chrome_options.add_argument(\"disable-dev-shm-usage\")\n            chrome_options.add_argument(\"no-sandbox\")\n            chrome_options.add_argument(\"allow-file-access-from-files\")\n            chrome_options.add_argument(\"use-fake-device-for-media-stream\")\n            chrome_options.add_argument(\"use-fake-ui-for-media-stream\")\n            chrome_options.add_argument(\"hide-scrollbars\")\n            chrome_options.add_argument(\"disable-features=VizDisplayCompositor\")\n            chrome_options.add_argument(\"disable-features=IsolateOrigins,site-per-process\")\n            chrome_options.add_argument(\"disable-popup-blocking\")\n            chrome_options.add_argument(\"disable-dev-shm-usage\")\n            chrome_options.add_argument(\"disable-notifications\")\n        match browser:\n            case \"firefox\":\n                driver = webdriver.Firefox()\n            case \"chrome_headless\":\n                chrome_options.add_argument(\"headless=new\")\n>               driver = webdriver.Chrome(options=chrome_options)\n\ntests/conftest.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.11/site-packages/selenium/webdriver/chrome/webdriver.py:49: in __init__\n    super().__init__(\n.venv/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:54: in __init__\n    super().__init__(\n.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:206: in __init__\n    self.start_session(capabilities)\n.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:291: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f1b5c8f27d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom no such execut...\\\\n#19 0x55cd99f4a847 \\\\u003Cunknown>\\\\n#20 0x55cd99f5a243 \\\\u003Cunknown>\\\\n#21 0x7f4428fdeb43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from no such execution context: uniqueContextId not found\nE         (Session info: chrome=114.0.5735.106)\nE       Stacktrace:\nE       #0 0x55cd99f614e3 <unknown>\nE       #1 0x55cd99c90c76 <unknown>\nE       #2 0x55cd99c7a8c3 <unknown>\nE       #3 0x55cd99c78bac <unknown>\nE       #4 0x55cd99c79162 <unknown>\nE       #5 0x55cd99c94af1 <unknown>\nE       #6 0x55cd99c9697e <unknown>\nE       #7 0x55cd99c96a4c <unknown>\nE       #8 0x55cd99cf5f77 <unknown>\nE       #9 0x55cd99cf447f <unknown>\nE       #10 0x55cd99cebde3 <unknown>\nE       #11 0x55cd99cc12dd <unknown>\nE       #12 0x55cd99cc234e <unknown>\nE       #13 0x55cd99f213e4 <unknown>\nE       #14 0x55cd99f253d7 <unknown>\nE       #15 0x55cd99f2fb20 <unknown>\nE       #16 0x55cd99f26023 <unknown>\nE       #17 0x55cd99ef41aa <unknown>\nE       #18 0x55cd99f4a6b8 <unknown>\nE       #19 0x55cd99f4a847 <unknown>\nE       #20 0x55cd99f5a243 <unknown>\nE       #21 0x7f4428fdeb43 <unknown>\n\n.venv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: SessionNotCreatedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"b2627efcac4c4376.json","parameterValues":[]}