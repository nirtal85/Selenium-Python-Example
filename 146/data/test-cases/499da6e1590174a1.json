{"uid":"499da6e1590174a1","name":"Logout of system test","fullName":"tests.login_test.TestLogin#test_logout","historyId":"5140bd5f6f67ada41db2303cd7499c00","time":{"start":1703725995096,"stop":1703726005345,"duration":10249},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x559576549d33 <unknown>\n#1 0x559576206f87 <unknown>\n#2 0x559576256c0e <unknown>\n#3 0x559576256d11 <unknown>\n#4 0x5595762a2004 <unknown>\n#5 0x55957628036d <unknown>\n#6 0x55957629f297 <unknown>\n#7 0x5595762800e3 <unknown>\n#8 0x559576248044 <unknown>\n#9 0x55957624944e <unknown>\n#10 0x55957650e861 <unknown>\n#11 0x559576512785 <unknown>\n#12 0x5595764fc285 <unknown>\n#13 0x55957651341f <unknown>\n#14 0x5595764e020f <unknown>\n#15 0x559576537028 <unknown>\n#16 0x5595765371f7 <unknown>\n#17 0x559576548ed4 <unknown>\n#18 0x7f1478694ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7fa33de3da90>\njson_data = {'forgot_password': {'error_message': \"We can't find a user with that e-mail address.\", 'success_message': 'A reset li...you page', 'name': 'test', 'new_name': 'another test', 'no_project_found_msg': 'No project matches the criteria', ...}}\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, json_data: dict):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param json_data: A dictionary containing JSON data.\n        :type json_data: dict\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Path(Path(__file__).absolute().parent.parent, \"data\", \"dog.png\"),\n            name=\"Attach file example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"TXT example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"some attachment name\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:38: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0b011657008437b66697657deb529621\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7fa33defa160>\nmessage = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x559576549d33 <unknown>\nE       #1 0x559576206f87 <unknown>\nE       #2 0x559576256c0e <unknown>\nE       #3 0x559576256d11 <unknown>\nE       #4 0x5595762a2004 <unknown>\nE       #5 0x55957628036d <unknown>\nE       #6 0x55957629f297 <unknown>\nE       #7 0x5595762800e3 <unknown>\nE       #8 0x559576248044 <unknown>\nE       #9 0x55957624944e <unknown>\nE       #10 0x55957650e861 <unknown>\nE       #11 0x559576512785 <unknown>\nE       #12 0x5595764fc285 <unknown>\nE       #13 0x55957651341f <unknown>\nE       #14 0x5595764e020f <unknown>\nE       #15 0x559576537028 <unknown>\nE       #16 0x5595765371f7 <unknown>\nE       #17 0x559576548ed4 <unknown>\nE       #18 0x7f1478694ac3 <unknown>\n\n.venv/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:101: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1703725792874,"stop":1703725792874,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"json_data","time":{"start":1703725792874,"stop":1703725792874,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1703725792874,"stop":1703725792874,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x559576549d33 <unknown>\n#1 0x559576206f87 <unknown>\n#2 0x559576256c0e <unknown>\n#3 0x559576256d11 <unknown>\n#4 0x5595762a2004 <unknown>\n#5 0x55957628036d <unknown>\n#6 0x55957629f297 <unknown>\n#7 0x5595762800e3 <unknown>\n#8 0x559576248044 <unknown>\n#9 0x55957624944e <unknown>\n#10 0x55957650e861 <unknown>\n#11 0x559576512785 <unknown>\n#12 0x5595764fc285 <unknown>\n#13 0x55957651341f <unknown>\n#14 0x5595764e020f <unknown>\n#15 0x559576537028 <unknown>\n#16 0x5595765371f7 <unknown>\n#17 0x559576548ed4 <unknown>\n#18 0x7f1478694ac3 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7fa33de3da90>\njson_data = {'forgot_password': {'error_message': \"We can't find a user with that e-mail address.\", 'success_message': 'A reset li...you page', 'name': 'test', 'new_name': 'another test', 'no_project_found_msg': 'No project matches the criteria', ...}}\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user I want to be able to logout after a successful login.\")\n    def test_logout(self, json_data: dict):\n        \"\"\"Test case to verify the logout functionality.\n    \n        :param json_data: A dictionary containing JSON data.\n        :type json_data: dict\n    \n        Source:\n        - Example attachments from Allure-Pytest GitHub repository: https://github.com/allure-framework/allure-python/tree/master/allure-pytest/examples\n    \n        Steps:\n        1. Perform a login with valid credentials.\n        2. Click on the logout link.\n        3. Verify that the page title matches the expected title after logout.\n    \n        Attachments:\n        - A simple text attachment with masked password and hidden hostname.\n        - Example HTML attachment.\n        - Example file attachment (dog.png).\n        - Example text content attachment.\n        - Example CSV content attachment.\n        - Example JSON content attachment.\n        - Example XML content attachment.\n        - Example URI list attachment.\n    \n        :return: None\n        \"\"\"\n        allure.dynamic.parameter(\n            \"password\", \"qwerty\", mode=allure.parameter_mode.MASKED\n        )\n        allure.dynamic.parameter(\n            \"hostname\", socket.gethostname(), mode=allure.parameter_mode.HIDDEN\n        )\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Path(Path(__file__).absolute().parent.parent, \"data\", \"dog.png\"),\n            name=\"Attach file example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"TXT example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n                <tag>\n                     <inside>...</inside>\n                 </tag>\n             \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"some attachment name\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:38: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0b011657008437b66697657deb529621\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7fa33defa160>\nmessage = ''\n\n    def until(self, method: Callable[[WebDriver], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x559576549d33 <unknown>\nE       #1 0x559576206f87 <unknown>\nE       #2 0x559576256c0e <unknown>\nE       #3 0x559576256d11 <unknown>\nE       #4 0x5595762a2004 <unknown>\nE       #5 0x55957628036d <unknown>\nE       #6 0x55957629f297 <unknown>\nE       #7 0x5595762800e3 <unknown>\nE       #8 0x559576248044 <unknown>\nE       #9 0x55957624944e <unknown>\nE       #10 0x55957650e861 <unknown>\nE       #11 0x559576512785 <unknown>\nE       #12 0x5595764fc285 <unknown>\nE       #13 0x55957651341f <unknown>\nE       #14 0x5595764e020f <unknown>\nE       #15 0x559576537028 <unknown>\nE       #16 0x5595765371f7 <unknown>\nE       #17 0x559576548ed4 <unknown>\nE       #18 0x7f1478694ac3 <unknown>\n\n.venv/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:101: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1703725995097,"stop":1703726005345,"duration":10248},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x559576549d33 <unknown>\n#1 0x559576206f87 <unknown>\n#2 0x559576256c0e <unknown>\n#3 0x559576256d11 <unknown>\n#4 0x5595762a2004 <unknown>\n#5 0x55957628036d <unknown>\n#6 0x55957629f297 <unknown>\n#7 0x5595762800e3 <unknown>\n#8 0x559576248044 <unknown>\n#9 0x55957624944e <unknown>\n#10 0x55957650e861 <unknown>\n#11 0x559576512785 <unknown>\n#12 0x5595764fc285 <unknown>\n#13 0x55957651341f <unknown>\n#14 0x5595764e020f <unknown>\n#15 0x559576537028 <unknown>\n#16 0x5595765371f7 <unknown>\n#17 0x559576548ed4 <unknown>\n#18 0x7f1478694ac3 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 20, in click_login_link\n    self.click(self.LOGIN_LINK)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 38, in click\n    el: WebElement = self.wait.until(\n                     ^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.11/site-packages/selenium/webdriver/support/wait.py\", line 101, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"de5496cce8f67c0a","name":"HTML example","source":"de5496cce8f67c0a.html","type":"text/html","size":32},{"uid":"3282d84707e0ed9","name":"Attach file example","source":"3282d84707e0ed9.png","type":"image/png","size":14730},{"uid":"b7ebbd31f94259e0","name":"TXT example","source":"b7ebbd31f94259e0.txt","type":"text/plain","size":17},{"uid":"6493fc9500d285b1","name":"CSV example","source":"6493fc9500d285b1.csv","type":"text/csv","size":32},{"uid":"d7022cd5683f799d","name":"JSON example","source":"d7022cd5683f799d.json","type":"application/json","size":31},{"uid":"3ec3e80391449a8","name":"some attachment name","source":"3ec3e80391449a8.xml","type":"application/xml","size":140},{"uid":"fc44b38b66da6bb3","name":"URI List example","source":"fc44b38b66da6bb3.uri","type":"text/uri-list","size":70},{"uid":"fc56850156abbc2d","name":"public ip address","source":"fc56850156abbc2d.txt","type":"text/plain","size":13},{"uid":"ff5a5838defc718a","name":"Cookies","source":"ff5a5838defc718a.json","type":"application/json","size":4407},{"uid":"c318500108bffbad","name":"Session Storage","source":"c318500108bffbad.json","type":"application/json","size":358},{"uid":"700c47e0e44641c1","name":"Local Storage","source":"700c47e0e44641c1.json","type":"application/json","size":208},{"uid":"f875a681a698fb8e","name":"Console Logs","source":"f875a681a698fb8e.json","type":"application/json","size":2},{"uid":"72ef01a6f3290221","name":"Full Page Screenshot","source":"72ef01a6f3290221.png","type":"image/png","size":1283197},{"uid":"b47265c36603f04d","name":"URL","source":"b47265c36603f04d.uri","type":"text/uri-list","size":23},{"uid":"b726ff637b07a91e","name":"Network Logs","source":"b726ff637b07a91e.json","type":"application/json","size":23007}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":15,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"severity","value":"blocker"},{"name":"feature","value":"Login"},{"name":"epic","value":"Security"},{"name":"story","value":"As a user I want to be able to logout after a successful login."},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"login_test"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az1206-584"},{"name":"thread","value":"2241-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.login_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"password","value":"******"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["security"]},"source":"499da6e1590174a1.json","parameterValues":["******"]}