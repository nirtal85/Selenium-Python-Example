{"uid":"b78ab35adeb45b6f","name":"Logout of system test","fullName":"tests.test_login.TestLogin#test_logout","historyId":"22bac01b3c7491378deafbf6e6797ba7","time":{"start":1682763816092,"stop":1682763826287,"duration":10195},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55bc55285fe3 <unknown>\n#1 0x55bc54fc4d36 <unknown>\n#2 0x55bc55001c4d <unknown>\n#3 0x55bc55001d61 <unknown>\n#4 0x55bc5503d6a4 <unknown>\n#5 0x55bc550228ed <unknown>\n#6 0x55bc5503b232 <unknown>\n#7 0x55bc55022693 <unknown>\n#8 0x55bc54ff503a <unknown>\n#9 0x55bc54ff617e <unknown>\n#10 0x55bc55247dbd <unknown>\n#11 0x55bc5524bc6c <unknown>\n#12 0x55bc552554b0 <unknown>\n#13 0x55bc5524cd63 <unknown>\n#14 0x55bc5521fc35 <unknown>\n#15 0x55bc55270138 <unknown>\n#16 0x55bc552702c7 <unknown>\n#17 0x55bc5527e093 <unknown>\n#18 0x7feb87d3fb43 <unknown>","statusTrace":"self = <tests.test_login.TestLogin object at 0x7ff3e9e800a0>\njson_reader = <utils.json_parser.JsonParser object at 0x7ff3e9f123e0>\nini_reader = <utils.config_parser.ConfigParserIni object at 0x7ff3e9caf1c0>\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user i want to be able to logout after a successful login.\")\n    @pytest.mark.run(order=2)\n    def test_logout(self, json_reader, ini_reader):\n        username = ini_reader.config_section_dict(\"Base Url\")[\"username\"]\n        password = ini_reader.config_section_dict(\"Base Url\")[\"password\"]\n        # example of a simple text attachment\n        allure.attach(body=username, name=\"username\", attachment_type=allure.attachment_type.TEXT)\n>       self.about_page.click_login_link()\n\ntests/test_login.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:19: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:21: in click\n    el: WebElement = self._wait.until(expected_conditions.element_to_be_clickable(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ed6b96615d2cf46dd34dc9a7e54e9cd6\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7ff3e9b271c0>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55bc55285fe3 <unknown>\nE       #1 0x55bc54fc4d36 <unknown>\nE       #2 0x55bc55001c4d <unknown>\nE       #3 0x55bc55001d61 <unknown>\nE       #4 0x55bc5503d6a4 <unknown>\nE       #5 0x55bc550228ed <unknown>\nE       #6 0x55bc5503b232 <unknown>\nE       #7 0x55bc55022693 <unknown>\nE       #8 0x55bc54ff503a <unknown>\nE       #9 0x55bc54ff617e <unknown>\nE       #10 0x55bc55247dbd <unknown>\nE       #11 0x55bc5524bc6c <unknown>\nE       #12 0x55bc552554b0 <unknown>\nE       #13 0x55bc5524cd63 <unknown>\nE       #14 0x55bc5521fc35 <unknown>\nE       #15 0x55bc55270138 <unknown>\nE       #16 0x55bc552702c7 <unknown>\nE       #17 0x55bc5527e093 <unknown>\nE       #18 0x7feb87d3fb43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"json_reader","time":{"start":1682763772730,"stop":1682763772731,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"ini_reader","time":{"start":1682763772732,"stop":1682763772732,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"create_driver","time":{"start":1682763813329,"stop":1682763816092,"duration":2763},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55bc55285fe3 <unknown>\n#1 0x55bc54fc4d36 <unknown>\n#2 0x55bc55001c4d <unknown>\n#3 0x55bc55001d61 <unknown>\n#4 0x55bc5503d6a4 <unknown>\n#5 0x55bc550228ed <unknown>\n#6 0x55bc5503b232 <unknown>\n#7 0x55bc55022693 <unknown>\n#8 0x55bc54ff503a <unknown>\n#9 0x55bc54ff617e <unknown>\n#10 0x55bc55247dbd <unknown>\n#11 0x55bc5524bc6c <unknown>\n#12 0x55bc552554b0 <unknown>\n#13 0x55bc5524cd63 <unknown>\n#14 0x55bc5521fc35 <unknown>\n#15 0x55bc55270138 <unknown>\n#16 0x55bc552702c7 <unknown>\n#17 0x55bc5527e093 <unknown>\n#18 0x7feb87d3fb43 <unknown>","statusTrace":"self = <tests.test_login.TestLogin object at 0x7ff3e9e800a0>\njson_reader = <utils.json_parser.JsonParser object at 0x7ff3e9f123e0>\nini_reader = <utils.config_parser.ConfigParserIni object at 0x7ff3e9caf1c0>\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user i want to be able to logout after a successful login.\")\n    @pytest.mark.run(order=2)\n    def test_logout(self, json_reader, ini_reader):\n        username = ini_reader.config_section_dict(\"Base Url\")[\"username\"]\n        password = ini_reader.config_section_dict(\"Base Url\")[\"password\"]\n        # example of a simple text attachment\n        allure.attach(body=username, name=\"username\", attachment_type=allure.attachment_type.TEXT)\n>       self.about_page.click_login_link()\n\ntests/test_login.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:19: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:21: in click\n    el: WebElement = self._wait.until(expected_conditions.element_to_be_clickable(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ed6b96615d2cf46dd34dc9a7e54e9cd6\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7ff3e9b271c0>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55bc55285fe3 <unknown>\nE       #1 0x55bc54fc4d36 <unknown>\nE       #2 0x55bc55001c4d <unknown>\nE       #3 0x55bc55001d61 <unknown>\nE       #4 0x55bc5503d6a4 <unknown>\nE       #5 0x55bc550228ed <unknown>\nE       #6 0x55bc5503b232 <unknown>\nE       #7 0x55bc55022693 <unknown>\nE       #8 0x55bc54ff503a <unknown>\nE       #9 0x55bc54ff617e <unknown>\nE       #10 0x55bc55247dbd <unknown>\nE       #11 0x55bc5524bc6c <unknown>\nE       #12 0x55bc552554b0 <unknown>\nE       #13 0x55bc5524cd63 <unknown>\nE       #14 0x55bc5521fc35 <unknown>\nE       #15 0x55bc55270138 <unknown>\nE       #16 0x55bc552702c7 <unknown>\nE       #17 0x55bc5527e093 <unknown>\nE       #18 0x7feb87d3fb43 <unknown>\n\n/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1682763816093,"stop":1682763826286,"duration":10193},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55bc55285fe3 <unknown>\n#1 0x55bc54fc4d36 <unknown>\n#2 0x55bc55001c4d <unknown>\n#3 0x55bc55001d61 <unknown>\n#4 0x55bc5503d6a4 <unknown>\n#5 0x55bc550228ed <unknown>\n#6 0x55bc5503b232 <unknown>\n#7 0x55bc55022693 <unknown>\n#8 0x55bc54ff503a <unknown>\n#9 0x55bc54ff617e <unknown>\n#10 0x55bc55247dbd <unknown>\n#11 0x55bc5524bc6c <unknown>\n#12 0x55bc552554b0 <unknown>\n#13 0x55bc5524cd63 <unknown>\n#14 0x55bc5521fc35 <unknown>\n#15 0x55bc55270138 <unknown>\n#16 0x55bc552702c7 <unknown>\n#17 0x55bc5527e093 <unknown>\n#18 0x7feb87d3fb43 <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 19, in click_login_link\n    self.click(self.LOGIN_LINK)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 21, in click\n    el: WebElement = self._wait.until(expected_conditions.element_to_be_clickable(locator))\n  File \"/opt/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py\", line 95, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":true,"hasContent":true}],"attachments":[{"uid":"c89db1251b77b5ca","name":"username","source":"c89db1251b77b5ca.txt","type":"text/plain","size":18},{"uid":"134a486d3db8dff0","name":"Full Page Screenshot","source":"134a486d3db8dff0.png","type":"image/png","size":2646979},{"uid":"8e300b5dd02a15b1","name":"URL","source":"8e300b5dd02a15b1.uri","type":"text/uri-list","size":23},{"uid":"7d572e37ff888e03","name":"public ip address","source":"7d572e37ff888e03.txt","type":"text/plain","size":15},{"uid":"a82f558875358f8d","name":"Cookies","source":"a82f558875358f8d.json","type":"application/json","size":3017},{"uid":"e94f74ca157b167f","name":"Session Storage","source":"e94f74ca157b167f.json","type":"application/json","size":2},{"uid":"763000534e240258","name":"Local Storage","source":"763000534e240258.json","type":"application/json","size":1400},{"uid":"b8b6b2c8162256ad","name":"Console Logs","source":"b8b6b2c8162256ad.json","type":"application/json","size":5314},{"uid":"cae17ef78e4f12e8","name":"Network Logs","source":"cae17ef78e4f12e8.json","type":"application/json","size":84987}],"parameters":[],"stepsCount":1,"attachmentsCount":9,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[{"name":"create_driver::0","time":{"start":1682763828481,"stop":1682763828542,"duration":61},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"epic","value":"Security"},{"name":"feature","value":"Login"},{"name":"severity","value":"blocker"},{"name":"story","value":"As a user i want to be able to logout after a successful login."},{"name":"tag","value":"run(order=2)"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az404-880"},{"name":"thread","value":"2193-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["run(order=2)","security"]},"source":"b78ab35adeb45b6f.json","parameterValues":[]}