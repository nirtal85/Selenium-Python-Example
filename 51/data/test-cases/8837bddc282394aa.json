{"uid":"8837bddc282394aa","name":"Logout of system test","fullName":"tests.login_test.TestLogin#test_logout","historyId":"e89a5a0e9aefe451ee262eba82370b01","time":{"start":1695517968012,"stop":1695517978347,"duration":10335},"description":"Log out from app","descriptionHtml":"<p>Log out from app</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5643e9b656c3 <unknown>\n#1 0x5643e983b1e7 <unknown>\n#2 0x5643e9882566 <unknown>\n#3 0x5643e9882651 <unknown>\n#4 0x5643e98bfa74 <unknown>\n#5 0x5643e98a40ed <unknown>\n#6 0x5643e98bd322 <unknown>\n#7 0x5643e98a3e93 <unknown>\n#8 0x5643e9876934 <unknown>\n#9 0x5643e987771e <unknown>\n#10 0x5643e9b2acc8 <unknown>\n#11 0x5643e9b2ec00 <unknown>\n#12 0x5643e9b391ac <unknown>\n#13 0x5643e9b2f818 <unknown>\n#14 0x5643e9afc28f <unknown>\n#15 0x5643e9b53e98 <unknown>\n#16 0x5643e9b54069 <unknown>\n#17 0x5643e9b64853 <unknown>\n#18 0x7f1b8a294b43 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7fe3d3f08bd0>\njson_data = {'forgot_password': {'error_message': \"We can't find a user with that e-mail address.\", 'success_message': 'A reset li...you page', 'name': 'test', 'new_name': 'another test', 'no_project_found_msg': 'No project matches the criteria', ...}}\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user i want to be able to logout after a successful login.\")\n    @pytest.mark.run(order=2)\n    def test_logout(self, json_data: dict):\n        # example of a simple text attachment\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Path(Path(__file__).absolute().parent.parent, \"data\", \"dog.png\"),\n            name=\"Attach file example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"TXT example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n            <tag>\n                 <inside>...</inside>\n             </tag>\n         \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"some attachment name\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:38: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"2558a7ac75c912c5dd0f6916eb83e5b1\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7fe3d3dad120>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x5643e9b656c3 <unknown>\nE       #1 0x5643e983b1e7 <unknown>\nE       #2 0x5643e9882566 <unknown>\nE       #3 0x5643e9882651 <unknown>\nE       #4 0x5643e98bfa74 <unknown>\nE       #5 0x5643e98a40ed <unknown>\nE       #6 0x5643e98bd322 <unknown>\nE       #7 0x5643e98a3e93 <unknown>\nE       #8 0x5643e9876934 <unknown>\nE       #9 0x5643e987771e <unknown>\nE       #10 0x5643e9b2acc8 <unknown>\nE       #11 0x5643e9b2ec00 <unknown>\nE       #12 0x5643e9b391ac <unknown>\nE       #13 0x5643e9b2f818 <unknown>\nE       #14 0x5643e9afc28f <unknown>\nE       #15 0x5643e9b53e98 <unknown>\nE       #16 0x5643e9b54069 <unknown>\nE       #17 0x5643e9b64853 <unknown>\nE       #18 0x7f1b8a294b43 <unknown>\n\n.venv/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1695517933614,"stop":1695517933614,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1695517933614,"stop":1695517933614,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"secret_data","time":{"start":1695517933615,"stop":1695517933615,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"json_data","time":{"start":1695517933615,"stop":1695517933615,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"Log out from app","status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5643e9b656c3 <unknown>\n#1 0x5643e983b1e7 <unknown>\n#2 0x5643e9882566 <unknown>\n#3 0x5643e9882651 <unknown>\n#4 0x5643e98bfa74 <unknown>\n#5 0x5643e98a40ed <unknown>\n#6 0x5643e98bd322 <unknown>\n#7 0x5643e98a3e93 <unknown>\n#8 0x5643e9876934 <unknown>\n#9 0x5643e987771e <unknown>\n#10 0x5643e9b2acc8 <unknown>\n#11 0x5643e9b2ec00 <unknown>\n#12 0x5643e9b391ac <unknown>\n#13 0x5643e9b2f818 <unknown>\n#14 0x5643e9afc28f <unknown>\n#15 0x5643e9b53e98 <unknown>\n#16 0x5643e9b54069 <unknown>\n#17 0x5643e9b64853 <unknown>\n#18 0x7f1b8a294b43 <unknown>","statusTrace":"self = <tests.login_test.TestLogin object at 0x7fe3d3f08bd0>\njson_data = {'forgot_password': {'error_message': \"We can't find a user with that e-mail address.\", 'success_message': 'A reset li...you page', 'name': 'test', 'new_name': 'another test', 'no_project_found_msg': 'No project matches the criteria', ...}}\n\n    @allure.description(\"Log out from app\")\n    @allure.title(\"Logout of system test\")\n    @allure.story(\"As a user i want to be able to logout after a successful login.\")\n    @pytest.mark.run(order=2)\n    def test_logout(self, json_data: dict):\n        # example of a simple text attachment\n        allure.attach(\n            \"<h1>Example html attachment</h1>\",\n            name=\"HTML example\",\n            attachment_type=allure.attachment_type.HTML,\n        )\n        # example of a file attachment\n        allure.attach.file(\n            Path(Path(__file__).absolute().parent.parent, \"data\", \"dog.png\"),\n            name=\"Attach file example\",\n            attachment_type=allure.attachment_type.PNG,\n        )\n        allure.attach(\n            \"Some text content\",\n            name=\"TXT example\",\n            attachment_type=allure.attachment_type.TEXT,\n        )\n        allure.attach(\n            \"first,second,third\\none,two,three\",\n            name=\"CSV example\",\n            attachment_type=allure.attachment_type.CSV,\n        )\n        allure.attach(\n            json.dumps({\"first\": 1, \"second\": 2}, indent=2),\n            name=\"JSON example\",\n            attachment_type=allure.attachment_type.JSON,\n        )\n        xml_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n            <tag>\n                 <inside>...</inside>\n             </tag>\n         \"\"\"\n        allure.attach(\n            xml_content,\n            name=\"some attachment name\",\n            attachment_type=allure.attachment_type.XML,\n        )\n        allure.attach(\n            \"\\n\".join(\n                [\n                    \"https://github.com/allure-framework\",\n                    \"https://github.com/allure-examples\",\n                ]\n            ),\n            name=\"URI List example\",\n            attachment_type=allure.attachment_type.URI_LIST,\n        )\n>       self.about_page.click_login_link()\n\ntests/login_test.py:98: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/about_page.py:20: in click_login_link\n    self.click(self.LOGIN_LINK)\npages/base_page.py:38: in click\n    el: WebElement = self.wait.until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"2558a7ac75c912c5dd0f6916eb83e5b1\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7fe3d3dad120>\nmessage = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x5643e9b656c3 <unknown>\nE       #1 0x5643e983b1e7 <unknown>\nE       #2 0x5643e9882566 <unknown>\nE       #3 0x5643e9882651 <unknown>\nE       #4 0x5643e98bfa74 <unknown>\nE       #5 0x5643e98a40ed <unknown>\nE       #6 0x5643e98bd322 <unknown>\nE       #7 0x5643e98a3e93 <unknown>\nE       #8 0x5643e9876934 <unknown>\nE       #9 0x5643e987771e <unknown>\nE       #10 0x5643e9b2acc8 <unknown>\nE       #11 0x5643e9b2ec00 <unknown>\nE       #12 0x5643e9b391ac <unknown>\nE       #13 0x5643e9b2f818 <unknown>\nE       #14 0x5643e9afc28f <unknown>\nE       #15 0x5643e9b53e98 <unknown>\nE       #16 0x5643e9b54069 <unknown>\nE       #17 0x5643e9b64853 <unknown>\nE       #18 0x7f1b8a294b43 <unknown>\n\n.venv/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException","steps":[{"name":"Click Login link","time":{"start":1695517968014,"stop":1695517978346,"duration":10332},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5643e9b656c3 <unknown>\n#1 0x5643e983b1e7 <unknown>\n#2 0x5643e9882566 <unknown>\n#3 0x5643e9882651 <unknown>\n#4 0x5643e98bfa74 <unknown>\n#5 0x5643e98a40ed <unknown>\n#6 0x5643e98bd322 <unknown>\n#7 0x5643e98a3e93 <unknown>\n#8 0x5643e9876934 <unknown>\n#9 0x5643e987771e <unknown>\n#10 0x5643e9b2acc8 <unknown>\n#11 0x5643e9b2ec00 <unknown>\n#12 0x5643e9b391ac <unknown>\n#13 0x5643e9b2f818 <unknown>\n#14 0x5643e9afc28f <unknown>\n#15 0x5643e9b53e98 <unknown>\n#16 0x5643e9b54069 <unknown>\n#17 0x5643e9b64853 <unknown>\n#18 0x7f1b8a294b43 <unknown>\n\n","statusTrace":"  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/about_page.py\", line 20, in click_login_link\n    self.click(self.LOGIN_LINK)\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/pages/base_page.py\", line 38, in click\n    el: WebElement = self.wait.until(\n                     ^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/Selenium-Python-Example/Selenium-Python-Example/.venv/lib/python3.11/site-packages/selenium/webdriver/support/wait.py\", line 95, in until\n    raise TimeoutException(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[{"uid":"d059d4f8ea194981","name":"HTML example","source":"d059d4f8ea194981.html","type":"text/html","size":32},{"uid":"6fa2fd20171d18b4","name":"Attach file example","source":"6fa2fd20171d18b4.png","type":"image/png","size":14730},{"uid":"9c6a7fe9ef690ade","name":"TXT example","source":"9c6a7fe9ef690ade.txt","type":"text/plain","size":17},{"uid":"32b4a4fa90f6b1dd","name":"CSV example","source":"32b4a4fa90f6b1dd.csv","type":"text/csv","size":32},{"uid":"6093aecfeb628d64","name":"JSON example","source":"6093aecfeb628d64.json","type":"application/json","size":31},{"uid":"6ae6bcf5624cb54a","name":"some attachment name","source":"6ae6bcf5624cb54a.xml","type":"application/xml","size":124},{"uid":"d29155887c4d5d5b","name":"URI List example","source":"d29155887c4d5d5b.uri","type":"text/uri-list","size":70},{"uid":"1834e6cfe5eaa23c","name":"public ip address","source":"1834e6cfe5eaa23c.txt","type":"text/plain","size":12},{"uid":"a298cd3af11ef9fa","name":"Cookies","source":"a298cd3af11ef9fa.json","type":"application/json","size":2018},{"uid":"1bdbac3ae54eb870","name":"Session Storage","source":"1bdbac3ae54eb870.json","type":"application/json","size":333},{"uid":"d0aa23016c1f1a4d","name":"Local Storage","source":"d0aa23016c1f1a4d.json","type":"application/json","size":208},{"uid":"7251c7664374b71f","name":"Console Logs","source":"7251c7664374b71f.json","type":"application/json","size":2},{"uid":"9ccc93eb20b782f0","name":"Full Page Screenshot","source":"9ccc93eb20b782f0.png","type":"image/png","size":2821846},{"uid":"9ca7070177c67bd7","name":"URL","source":"9ca7070177c67bd7.uri","type":"text/uri-list","size":23},{"uid":"f24e3f8cfa5c1d53","name":"Network Logs","source":"f24e3f8cfa5c1d53.json","type":"application/json","size":23081}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":15,"hasContent":true},"afterStages":[],"labels":[{"name":"epic","value":"Security"},{"name":"feature","value":"Login"},{"name":"severity","value":"blocker"},{"name":"story","value":"As a user i want to be able to logout after a successful login."},{"name":"tag","value":"run(order=2)"},{"name":"tag","value":"security"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"login_test"},{"name":"subSuite","value":"TestLogin"},{"name":"host","value":"fv-az176-182"},{"name":"thread","value":"2209-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.login_test"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"blocker","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":["run(order=2)","security"]},"source":"8837bddc282394aa.json","parameterValues":[]}